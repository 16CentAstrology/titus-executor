// Code generated by protoc-gen-go. DO NOT EDIT.
// source: netflix/titus/agent.proto

package titus

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TaskInfo_Status int32

const (
	TaskInfo_RUNNING TaskInfo_Status = 0
	TaskInfo_FAILED  TaskInfo_Status = 1
	TaskInfo_STOPPED TaskInfo_Status = 2
)

var TaskInfo_Status_name = map[int32]string{
	0: "RUNNING",
	1: "FAILED",
	2: "STOPPED",
}
var TaskInfo_Status_value = map[string]int32{
	"RUNNING": 0,
	"FAILED":  1,
	"STOPPED": 2,
}

func (x TaskInfo_Status) Enum() *TaskInfo_Status {
	p := new(TaskInfo_Status)
	*p = x
	return p
}
func (x TaskInfo_Status) String() string {
	return proto.EnumName(TaskInfo_Status_name, int32(x))
}
func (x *TaskInfo_Status) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TaskInfo_Status_value, data, "TaskInfo_Status")
	if err != nil {
		return err
	}
	*x = TaskInfo_Status(value)
	return nil
}
func (TaskInfo_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{3, 0} }

type ContainerInfo_SnapshotPolicy int32

const (
	ContainerInfo_NEVER        ContainerInfo_SnapshotPolicy = 0
	ContainerInfo_ERROR_ONLY   ContainerInfo_SnapshotPolicy = 1
	ContainerInfo_SUCCESS_ONLY ContainerInfo_SnapshotPolicy = 2
	ContainerInfo_ALWAYS       ContainerInfo_SnapshotPolicy = 3
)

var ContainerInfo_SnapshotPolicy_name = map[int32]string{
	0: "NEVER",
	1: "ERROR_ONLY",
	2: "SUCCESS_ONLY",
	3: "ALWAYS",
}
var ContainerInfo_SnapshotPolicy_value = map[string]int32{
	"NEVER":        0,
	"ERROR_ONLY":   1,
	"SUCCESS_ONLY": 2,
	"ALWAYS":       3,
}

func (x ContainerInfo_SnapshotPolicy) Enum() *ContainerInfo_SnapshotPolicy {
	p := new(ContainerInfo_SnapshotPolicy)
	*p = x
	return p
}
func (x ContainerInfo_SnapshotPolicy) String() string {
	return proto.EnumName(ContainerInfo_SnapshotPolicy_name, int32(x))
}
func (x *ContainerInfo_SnapshotPolicy) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ContainerInfo_SnapshotPolicy_value, data, "ContainerInfo_SnapshotPolicy")
	if err != nil {
		return err
	}
	*x = ContainerInfo_SnapshotPolicy(value)
	return nil
}
func (ContainerInfo_SnapshotPolicy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor2, []int{4, 0}
}

type ContainerInfo_EfsConfigInfo_MountPerms int32

const (
	ContainerInfo_EfsConfigInfo_RW ContainerInfo_EfsConfigInfo_MountPerms = 1
	ContainerInfo_EfsConfigInfo_RO ContainerInfo_EfsConfigInfo_MountPerms = 2
	ContainerInfo_EfsConfigInfo_WO ContainerInfo_EfsConfigInfo_MountPerms = 3
)

var ContainerInfo_EfsConfigInfo_MountPerms_name = map[int32]string{
	1: "RW",
	2: "RO",
	3: "WO",
}
var ContainerInfo_EfsConfigInfo_MountPerms_value = map[string]int32{
	"RW": 1,
	"RO": 2,
	"WO": 3,
}

func (x ContainerInfo_EfsConfigInfo_MountPerms) Enum() *ContainerInfo_EfsConfigInfo_MountPerms {
	p := new(ContainerInfo_EfsConfigInfo_MountPerms)
	*p = x
	return p
}
func (x ContainerInfo_EfsConfigInfo_MountPerms) String() string {
	return proto.EnumName(ContainerInfo_EfsConfigInfo_MountPerms_name, int32(x))
}
func (x *ContainerInfo_EfsConfigInfo_MountPerms) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ContainerInfo_EfsConfigInfo_MountPerms_value, data, "ContainerInfo_EfsConfigInfo_MountPerms")
	if err != nil {
		return err
	}
	*x = ContainerInfo_EfsConfigInfo_MountPerms(value)
	return nil
}
func (ContainerInfo_EfsConfigInfo_MountPerms) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor2, []int{4, 2, 0}
}

// Taken from include/uapi/linux/capability.h
// #define _LINUX_CAPABILITY_VERSION_3  0x20080522
type ContainerInfo_Capabilities_Capability int32

const (
	ContainerInfo_Capabilities_CHOWN            ContainerInfo_Capabilities_Capability = 0
	ContainerInfo_Capabilities_DAC_OVERRIDE     ContainerInfo_Capabilities_Capability = 1
	ContainerInfo_Capabilities_DAC_READ_SEARCH  ContainerInfo_Capabilities_Capability = 2
	ContainerInfo_Capabilities_FOWNER           ContainerInfo_Capabilities_Capability = 3
	ContainerInfo_Capabilities_FSETID           ContainerInfo_Capabilities_Capability = 4
	ContainerInfo_Capabilities_KILL             ContainerInfo_Capabilities_Capability = 5
	ContainerInfo_Capabilities_SETGID           ContainerInfo_Capabilities_Capability = 6
	ContainerInfo_Capabilities_SETUID           ContainerInfo_Capabilities_Capability = 7
	ContainerInfo_Capabilities_SETPCAP          ContainerInfo_Capabilities_Capability = 8
	ContainerInfo_Capabilities_LINUX_IMMUTABLE  ContainerInfo_Capabilities_Capability = 9
	ContainerInfo_Capabilities_NET_BIND_SERVICE ContainerInfo_Capabilities_Capability = 10
	ContainerInfo_Capabilities_NET_BROADCAST    ContainerInfo_Capabilities_Capability = 11
	ContainerInfo_Capabilities_NET_ADMIN        ContainerInfo_Capabilities_Capability = 12
	ContainerInfo_Capabilities_NET_RAW          ContainerInfo_Capabilities_Capability = 13
	ContainerInfo_Capabilities_IPC_LOCK         ContainerInfo_Capabilities_Capability = 14
	ContainerInfo_Capabilities_IPC_OWNER        ContainerInfo_Capabilities_Capability = 15
	ContainerInfo_Capabilities_SYS_MODULE       ContainerInfo_Capabilities_Capability = 16
	ContainerInfo_Capabilities_SYS_RAWIO        ContainerInfo_Capabilities_Capability = 17
	ContainerInfo_Capabilities_SYS_CHROOT       ContainerInfo_Capabilities_Capability = 18
	ContainerInfo_Capabilities_SYS_PTRACE       ContainerInfo_Capabilities_Capability = 19
	ContainerInfo_Capabilities_SYS_PACCT        ContainerInfo_Capabilities_Capability = 20
	ContainerInfo_Capabilities_SYS_ADMIN        ContainerInfo_Capabilities_Capability = 21
	ContainerInfo_Capabilities_SYS_BOOT         ContainerInfo_Capabilities_Capability = 22
	ContainerInfo_Capabilities_SYS_NICE         ContainerInfo_Capabilities_Capability = 23
	ContainerInfo_Capabilities_SYS_RESOURCE     ContainerInfo_Capabilities_Capability = 24
	ContainerInfo_Capabilities_SYS_TIME         ContainerInfo_Capabilities_Capability = 25
	ContainerInfo_Capabilities_SYS_TTY_CONFIG   ContainerInfo_Capabilities_Capability = 26
	ContainerInfo_Capabilities_MKNOD            ContainerInfo_Capabilities_Capability = 27
	ContainerInfo_Capabilities_LEASE            ContainerInfo_Capabilities_Capability = 28
	ContainerInfo_Capabilities_AUDIT_WRITE      ContainerInfo_Capabilities_Capability = 29
	ContainerInfo_Capabilities_AUDIT_CONTROL    ContainerInfo_Capabilities_Capability = 30
	ContainerInfo_Capabilities_SETFCAP          ContainerInfo_Capabilities_Capability = 31
	ContainerInfo_Capabilities_MAC_OVERRIDE     ContainerInfo_Capabilities_Capability = 32
	ContainerInfo_Capabilities_MAC_ADMIN        ContainerInfo_Capabilities_Capability = 33
	ContainerInfo_Capabilities_SYSLOG           ContainerInfo_Capabilities_Capability = 34
	ContainerInfo_Capabilities_WAKE_ALARM       ContainerInfo_Capabilities_Capability = 35
	ContainerInfo_Capabilities_BLOCK_SUSPEND    ContainerInfo_Capabilities_Capability = 36
	ContainerInfo_Capabilities_AUDIT_READ       ContainerInfo_Capabilities_Capability = 37
)

var ContainerInfo_Capabilities_Capability_name = map[int32]string{
	0:  "CHOWN",
	1:  "DAC_OVERRIDE",
	2:  "DAC_READ_SEARCH",
	3:  "FOWNER",
	4:  "FSETID",
	5:  "KILL",
	6:  "SETGID",
	7:  "SETUID",
	8:  "SETPCAP",
	9:  "LINUX_IMMUTABLE",
	10: "NET_BIND_SERVICE",
	11: "NET_BROADCAST",
	12: "NET_ADMIN",
	13: "NET_RAW",
	14: "IPC_LOCK",
	15: "IPC_OWNER",
	16: "SYS_MODULE",
	17: "SYS_RAWIO",
	18: "SYS_CHROOT",
	19: "SYS_PTRACE",
	20: "SYS_PACCT",
	21: "SYS_ADMIN",
	22: "SYS_BOOT",
	23: "SYS_NICE",
	24: "SYS_RESOURCE",
	25: "SYS_TIME",
	26: "SYS_TTY_CONFIG",
	27: "MKNOD",
	28: "LEASE",
	29: "AUDIT_WRITE",
	30: "AUDIT_CONTROL",
	31: "SETFCAP",
	32: "MAC_OVERRIDE",
	33: "MAC_ADMIN",
	34: "SYSLOG",
	35: "WAKE_ALARM",
	36: "BLOCK_SUSPEND",
	37: "AUDIT_READ",
}
var ContainerInfo_Capabilities_Capability_value = map[string]int32{
	"CHOWN":            0,
	"DAC_OVERRIDE":     1,
	"DAC_READ_SEARCH":  2,
	"FOWNER":           3,
	"FSETID":           4,
	"KILL":             5,
	"SETGID":           6,
	"SETUID":           7,
	"SETPCAP":          8,
	"LINUX_IMMUTABLE":  9,
	"NET_BIND_SERVICE": 10,
	"NET_BROADCAST":    11,
	"NET_ADMIN":        12,
	"NET_RAW":          13,
	"IPC_LOCK":         14,
	"IPC_OWNER":        15,
	"SYS_MODULE":       16,
	"SYS_RAWIO":        17,
	"SYS_CHROOT":       18,
	"SYS_PTRACE":       19,
	"SYS_PACCT":        20,
	"SYS_ADMIN":        21,
	"SYS_BOOT":         22,
	"SYS_NICE":         23,
	"SYS_RESOURCE":     24,
	"SYS_TIME":         25,
	"SYS_TTY_CONFIG":   26,
	"MKNOD":            27,
	"LEASE":            28,
	"AUDIT_WRITE":      29,
	"AUDIT_CONTROL":    30,
	"SETFCAP":          31,
	"MAC_OVERRIDE":     32,
	"MAC_ADMIN":        33,
	"SYSLOG":           34,
	"WAKE_ALARM":       35,
	"BLOCK_SUSPEND":    36,
	"AUDIT_READ":       37,
}

func (x ContainerInfo_Capabilities_Capability) Enum() *ContainerInfo_Capabilities_Capability {
	p := new(ContainerInfo_Capabilities_Capability)
	*p = x
	return p
}
func (x ContainerInfo_Capabilities_Capability) String() string {
	return proto.EnumName(ContainerInfo_Capabilities_Capability_name, int32(x))
}
func (x *ContainerInfo_Capabilities_Capability) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ContainerInfo_Capabilities_Capability_value, data, "ContainerInfo_Capabilities_Capability")
	if err != nil {
		return err
	}
	*x = ContainerInfo_Capabilities_Capability(value)
	return nil
}
func (ContainerInfo_Capabilities_Capability) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor2, []int{4, 3, 0}
}

type TaskStatusData struct {
	Timestamp        *int64 `protobuf:"varint,1,req,name=timestamp" json:"timestamp,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *TaskStatusData) Reset()                    { *m = TaskStatusData{} }
func (m *TaskStatusData) String() string            { return proto.CompactTextString(m) }
func (*TaskStatusData) ProtoMessage()               {}
func (*TaskStatusData) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *TaskStatusData) GetTimestamp() int64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

type StateUpdate struct {
	Id               *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	State            *string `protobuf:"bytes,2,opt,name=state" json:"state,omitempty"`
	Message          *string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Timestamp        *string `protobuf:"bytes,4,opt,name=timestamp" json:"timestamp,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *StateUpdate) Reset()                    { *m = StateUpdate{} }
func (m *StateUpdate) String() string            { return proto.CompactTextString(m) }
func (*StateUpdate) ProtoMessage()               {}
func (*StateUpdate) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *StateUpdate) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *StateUpdate) GetState() string {
	if m != nil && m.State != nil {
		return *m.State
	}
	return ""
}

func (m *StateUpdate) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

func (m *StateUpdate) GetTimestamp() string {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return ""
}

type StateUpdates struct {
	StateUpdate      []*StateUpdate `protobuf:"bytes,1,rep,name=stateUpdate" json:"stateUpdate,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *StateUpdates) Reset()                    { *m = StateUpdates{} }
func (m *StateUpdates) String() string            { return proto.CompactTextString(m) }
func (*StateUpdates) ProtoMessage()               {}
func (*StateUpdates) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *StateUpdates) GetStateUpdate() []*StateUpdate {
	if m != nil {
		return m.StateUpdate
	}
	return nil
}

type TaskInfo struct {
	ContainerId         *string                         `protobuf:"bytes,1,opt,name=containerId" json:"containerId,omitempty"`
	TaskId              *string                         `protobuf:"bytes,2,opt,name=taskId" json:"taskId,omitempty"`
	HostName            *string                         `protobuf:"bytes,3,opt,name=hostName" json:"hostName,omitempty"`
	SlaveId             *string                         `protobuf:"bytes,4,opt,name=slaveId" json:"slaveId,omitempty"`
	Status              *TaskInfo_Status                `protobuf:"varint,5,opt,name=status,enum=messages.TaskInfo_Status" json:"status,omitempty"`
	Message             *string                         `protobuf:"bytes,6,opt,name=message" json:"message,omitempty"`
	EnvironmentVariable []*TaskInfo_EnvironmentVariable `protobuf:"bytes,7,rep,name=environmentVariable" json:"environmentVariable,omitempty"`
	XXX_unrecognized    []byte                          `json:"-"`
}

func (m *TaskInfo) Reset()                    { *m = TaskInfo{} }
func (m *TaskInfo) String() string            { return proto.CompactTextString(m) }
func (*TaskInfo) ProtoMessage()               {}
func (*TaskInfo) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *TaskInfo) GetContainerId() string {
	if m != nil && m.ContainerId != nil {
		return *m.ContainerId
	}
	return ""
}

func (m *TaskInfo) GetTaskId() string {
	if m != nil && m.TaskId != nil {
		return *m.TaskId
	}
	return ""
}

func (m *TaskInfo) GetHostName() string {
	if m != nil && m.HostName != nil {
		return *m.HostName
	}
	return ""
}

func (m *TaskInfo) GetSlaveId() string {
	if m != nil && m.SlaveId != nil {
		return *m.SlaveId
	}
	return ""
}

func (m *TaskInfo) GetStatus() TaskInfo_Status {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return TaskInfo_RUNNING
}

func (m *TaskInfo) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

func (m *TaskInfo) GetEnvironmentVariable() []*TaskInfo_EnvironmentVariable {
	if m != nil {
		return m.EnvironmentVariable
	}
	return nil
}

type TaskInfo_EnvironmentVariable struct {
	Name             *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value            *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TaskInfo_EnvironmentVariable) Reset()                    { *m = TaskInfo_EnvironmentVariable{} }
func (m *TaskInfo_EnvironmentVariable) String() string            { return proto.CompactTextString(m) }
func (*TaskInfo_EnvironmentVariable) ProtoMessage()               {}
func (*TaskInfo_EnvironmentVariable) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3, 0} }

func (m *TaskInfo_EnvironmentVariable) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *TaskInfo_EnvironmentVariable) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

type ContainerInfo struct {
	ImageName      *string `protobuf:"bytes,1,opt,name=imageName" json:"imageName,omitempty"`
	Command        *string `protobuf:"bytes,2,opt,name=command" json:"command,omitempty"`
	ContainerPorts *string `protobuf:"bytes,3,opt,name=containerPorts" json:"containerPorts,omitempty"`
	Version        *string `protobuf:"bytes,4,opt,name=version,def=latest" json:"version,omitempty"`
	// deprecated: use userProvidedEnv and titusProvidedEnv instead
	EnvironmentVariable []*ContainerInfo_EnvironmentVariable `protobuf:"bytes,5,rep,name=environmentVariable" json:"environmentVariable,omitempty"`
	JobId               *string                              `protobuf:"bytes,6,opt,name=jobId" json:"jobId,omitempty"`
	LogUploadRegexp     *string                              `protobuf:"bytes,7,opt,name=logUploadRegexp" json:"logUploadRegexp,omitempty"`
	MaxHealthFailures   *uint32                              `protobuf:"varint,8,opt,name=maxHealthFailures" json:"maxHealthFailures,omitempty"`
	HealthCheckCmd      []string                             `protobuf:"bytes,9,rep,name=healthCheckCmd" json:"healthCheckCmd,omitempty"`
	SnapshotPolicy      *ContainerInfo_SnapshotPolicy        `protobuf:"varint,10,opt,name=snapshotPolicy,enum=messages.ContainerInfo_SnapshotPolicy" json:"snapshotPolicy,omitempty"`
	EntrypointCmd       []string                             `protobuf:"bytes,11,rep,name=entrypointCmd" json:"entrypointCmd,omitempty"`
	EntrypointStr       *string                              `protobuf:"bytes,13,opt,name=entrypointStr" json:"entrypointStr,omitempty"`
	AppName             *string                              `protobuf:"bytes,14,opt,name=appName" json:"appName,omitempty"`
	JobGroupStack       *string                              `protobuf:"bytes,15,opt,name=jobGroupStack" json:"jobGroupStack,omitempty"`
	JobGroupDetail      *string                              `protobuf:"bytes,16,opt,name=jobGroupDetail" json:"jobGroupDetail,omitempty"`
	IamProfile          *string                              `protobuf:"bytes,17,opt,name=iamProfile" json:"iamProfile,omitempty"`
	NetworkConfigInfo   *ContainerInfo_NetworkConfigInfo     `protobuf:"bytes,18,opt,name=networkConfigInfo" json:"networkConfigInfo,omitempty"`
	JobGroupSequence    *string                              `protobuf:"bytes,19,opt,name=jobGroupSequence" json:"jobGroupSequence,omitempty"`
	// TODO(Sargun): Remove, and use the Mesos resource info instead
	NumGpus          *uint32                        `protobuf:"varint,20,opt,name=numGpus" json:"numGpus,omitempty"`
	EfsConfigInfo    []*ContainerInfo_EfsConfigInfo `protobuf:"bytes,21,rep,name=efsConfigInfo" json:"efsConfigInfo,omitempty"`
	Capabilities     *ContainerInfo_Capabilities    `protobuf:"bytes,22,opt,name=capabilities" json:"capabilities,omitempty"`
	MetatronCreds    *ContainerInfo_MetatronCreds   `protobuf:"bytes,23,opt,name=metatronCreds" json:"metatronCreds,omitempty"`
	UserProvidedEnv  map[string]string              `protobuf:"bytes,24,rep,name=userProvidedEnv" json:"userProvidedEnv,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	TitusProvidedEnv map[string]string              `protobuf:"bytes,25,rep,name=titusProvidedEnv" json:"titusProvidedEnv,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// imageDigest has precedence over version
	ImageDigest          *string `protobuf:"bytes,26,opt,name=imageDigest" json:"imageDigest,omitempty"`
	AllowNetworkBursting *bool   `protobuf:"varint,27,opt,name=allowNetworkBursting" json:"allowNetworkBursting,omitempty"`
	// Number of seconds to wait before killing the container
	// otherwise, it will use the dockerd default
	KillWaitSeconds *uint32 `protobuf:"varint,28,opt,name=killWaitSeconds" json:"killWaitSeconds,omitempty"`
	// If the engine that is using this agent supports the
	// killinitiated state, this should be set to true.
	// That way, when this container is killed, as well as
	// when it is launched, the launchguard will be ignored.
	IgnoreLaunchGuard *bool `protobuf:"varint,29,opt,name=ignoreLaunchGuard" json:"ignoreLaunchGuard,omitempty"`
	// Should we allow this container to run privileged enough
	// to run internal container runtimes?
	AllowNestedContainers *bool `protobuf:"varint,30,opt,name=allowNestedContainers" json:"allowNestedContainers,omitempty"`
	// The image name with the registry
	FullyQualifiedImage *string `protobuf:"bytes,31,opt,name=fullyQualifiedImage" json:"fullyQualifiedImage,omitempty"`
	// Should this container be allowed to excceed its CPU cap?
	AllowCpuBursting *bool `protobuf:"varint,32,opt,name=allowCpuBursting" json:"allowCpuBursting,omitempty"`
	// Should this be tagged sched_batch? Does it prefer bigger chunks
	// of CPU, less frequently?
	Batch            *bool                          `protobuf:"varint,33,opt,name=batch" json:"batch,omitempty"`
	S3LogLocations   []*ContainerInfo_S3LogLocation `protobuf:"bytes,34,rep,name=s3LogLocations" json:"s3LogLocations,omitempty"`
	XXX_unrecognized []byte                         `json:"-"`
}

func (m *ContainerInfo) Reset()                    { *m = ContainerInfo{} }
func (m *ContainerInfo) String() string            { return proto.CompactTextString(m) }
func (*ContainerInfo) ProtoMessage()               {}
func (*ContainerInfo) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

const Default_ContainerInfo_Version string = "latest"

func (m *ContainerInfo) GetImageName() string {
	if m != nil && m.ImageName != nil {
		return *m.ImageName
	}
	return ""
}

func (m *ContainerInfo) GetCommand() string {
	if m != nil && m.Command != nil {
		return *m.Command
	}
	return ""
}

func (m *ContainerInfo) GetContainerPorts() string {
	if m != nil && m.ContainerPorts != nil {
		return *m.ContainerPorts
	}
	return ""
}

func (m *ContainerInfo) GetVersion() string {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return Default_ContainerInfo_Version
}

func (m *ContainerInfo) GetEnvironmentVariable() []*ContainerInfo_EnvironmentVariable {
	if m != nil {
		return m.EnvironmentVariable
	}
	return nil
}

func (m *ContainerInfo) GetJobId() string {
	if m != nil && m.JobId != nil {
		return *m.JobId
	}
	return ""
}

func (m *ContainerInfo) GetLogUploadRegexp() string {
	if m != nil && m.LogUploadRegexp != nil {
		return *m.LogUploadRegexp
	}
	return ""
}

func (m *ContainerInfo) GetMaxHealthFailures() uint32 {
	if m != nil && m.MaxHealthFailures != nil {
		return *m.MaxHealthFailures
	}
	return 0
}

func (m *ContainerInfo) GetHealthCheckCmd() []string {
	if m != nil {
		return m.HealthCheckCmd
	}
	return nil
}

func (m *ContainerInfo) GetSnapshotPolicy() ContainerInfo_SnapshotPolicy {
	if m != nil && m.SnapshotPolicy != nil {
		return *m.SnapshotPolicy
	}
	return ContainerInfo_NEVER
}

func (m *ContainerInfo) GetEntrypointCmd() []string {
	if m != nil {
		return m.EntrypointCmd
	}
	return nil
}

func (m *ContainerInfo) GetEntrypointStr() string {
	if m != nil && m.EntrypointStr != nil {
		return *m.EntrypointStr
	}
	return ""
}

func (m *ContainerInfo) GetAppName() string {
	if m != nil && m.AppName != nil {
		return *m.AppName
	}
	return ""
}

func (m *ContainerInfo) GetJobGroupStack() string {
	if m != nil && m.JobGroupStack != nil {
		return *m.JobGroupStack
	}
	return ""
}

func (m *ContainerInfo) GetJobGroupDetail() string {
	if m != nil && m.JobGroupDetail != nil {
		return *m.JobGroupDetail
	}
	return ""
}

func (m *ContainerInfo) GetIamProfile() string {
	if m != nil && m.IamProfile != nil {
		return *m.IamProfile
	}
	return ""
}

func (m *ContainerInfo) GetNetworkConfigInfo() *ContainerInfo_NetworkConfigInfo {
	if m != nil {
		return m.NetworkConfigInfo
	}
	return nil
}

func (m *ContainerInfo) GetJobGroupSequence() string {
	if m != nil && m.JobGroupSequence != nil {
		return *m.JobGroupSequence
	}
	return ""
}

func (m *ContainerInfo) GetNumGpus() uint32 {
	if m != nil && m.NumGpus != nil {
		return *m.NumGpus
	}
	return 0
}

func (m *ContainerInfo) GetEfsConfigInfo() []*ContainerInfo_EfsConfigInfo {
	if m != nil {
		return m.EfsConfigInfo
	}
	return nil
}

func (m *ContainerInfo) GetCapabilities() *ContainerInfo_Capabilities {
	if m != nil {
		return m.Capabilities
	}
	return nil
}

func (m *ContainerInfo) GetMetatronCreds() *ContainerInfo_MetatronCreds {
	if m != nil {
		return m.MetatronCreds
	}
	return nil
}

func (m *ContainerInfo) GetUserProvidedEnv() map[string]string {
	if m != nil {
		return m.UserProvidedEnv
	}
	return nil
}

func (m *ContainerInfo) GetTitusProvidedEnv() map[string]string {
	if m != nil {
		return m.TitusProvidedEnv
	}
	return nil
}

func (m *ContainerInfo) GetImageDigest() string {
	if m != nil && m.ImageDigest != nil {
		return *m.ImageDigest
	}
	return ""
}

func (m *ContainerInfo) GetAllowNetworkBursting() bool {
	if m != nil && m.AllowNetworkBursting != nil {
		return *m.AllowNetworkBursting
	}
	return false
}

func (m *ContainerInfo) GetKillWaitSeconds() uint32 {
	if m != nil && m.KillWaitSeconds != nil {
		return *m.KillWaitSeconds
	}
	return 0
}

func (m *ContainerInfo) GetIgnoreLaunchGuard() bool {
	if m != nil && m.IgnoreLaunchGuard != nil {
		return *m.IgnoreLaunchGuard
	}
	return false
}

func (m *ContainerInfo) GetAllowNestedContainers() bool {
	if m != nil && m.AllowNestedContainers != nil {
		return *m.AllowNestedContainers
	}
	return false
}

func (m *ContainerInfo) GetFullyQualifiedImage() string {
	if m != nil && m.FullyQualifiedImage != nil {
		return *m.FullyQualifiedImage
	}
	return ""
}

func (m *ContainerInfo) GetAllowCpuBursting() bool {
	if m != nil && m.AllowCpuBursting != nil {
		return *m.AllowCpuBursting
	}
	return false
}

func (m *ContainerInfo) GetBatch() bool {
	if m != nil && m.Batch != nil {
		return *m.Batch
	}
	return false
}

func (m *ContainerInfo) GetS3LogLocations() []*ContainerInfo_S3LogLocation {
	if m != nil {
		return m.S3LogLocations
	}
	return nil
}

// deprecated: use userProvidedEnv and titusProvidedEnv instead
type ContainerInfo_EnvironmentVariable struct {
	Name             *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value            *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ContainerInfo_EnvironmentVariable) Reset()         { *m = ContainerInfo_EnvironmentVariable{} }
func (m *ContainerInfo_EnvironmentVariable) String() string { return proto.CompactTextString(m) }
func (*ContainerInfo_EnvironmentVariable) ProtoMessage()    {}
func (*ContainerInfo_EnvironmentVariable) Descriptor() ([]byte, []int) {
	return fileDescriptor2, []int{4, 0}
}

func (m *ContainerInfo_EnvironmentVariable) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *ContainerInfo_EnvironmentVariable) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

type ContainerInfo_NetworkConfigInfo struct {
	// should this be required?
	// it was added later (typo fix)
	EniLabel           *string  `protobuf:"bytes,5,opt,name=eniLabel" json:"eniLabel,omitempty"`
	SecurityGroups     []string `protobuf:"bytes,3,rep,name=securityGroups" json:"securityGroups,omitempty"`
	BandwidthLimitMbps *uint32  `protobuf:"varint,4,opt,name=bandwidthLimitMbps" json:"bandwidthLimitMbps,omitempty"`
	XXX_unrecognized   []byte   `json:"-"`
}

func (m *ContainerInfo_NetworkConfigInfo) Reset()         { *m = ContainerInfo_NetworkConfigInfo{} }
func (m *ContainerInfo_NetworkConfigInfo) String() string { return proto.CompactTextString(m) }
func (*ContainerInfo_NetworkConfigInfo) ProtoMessage()    {}
func (*ContainerInfo_NetworkConfigInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor2, []int{4, 1}
}

func (m *ContainerInfo_NetworkConfigInfo) GetEniLabel() string {
	if m != nil && m.EniLabel != nil {
		return *m.EniLabel
	}
	return ""
}

func (m *ContainerInfo_NetworkConfigInfo) GetSecurityGroups() []string {
	if m != nil {
		return m.SecurityGroups
	}
	return nil
}

func (m *ContainerInfo_NetworkConfigInfo) GetBandwidthLimitMbps() uint32 {
	if m != nil && m.BandwidthLimitMbps != nil {
		return *m.BandwidthLimitMbps
	}
	return 0
}

type ContainerInfo_EfsConfigInfo struct {
	EfsFsId               *string                                 `protobuf:"bytes,1,req,name=efsFsId" json:"efsFsId,omitempty"`
	MountPoint            *string                                 `protobuf:"bytes,2,req,name=mountPoint" json:"mountPoint,omitempty"`
	MntPerms              *ContainerInfo_EfsConfigInfo_MountPerms `protobuf:"varint,3,opt,name=mntPerms,enum=messages.ContainerInfo_EfsConfigInfo_MountPerms" json:"mntPerms,omitempty"`
	EfsFsRelativeMntPoint *string                                 `protobuf:"bytes,4,opt,name=efsFsRelativeMntPoint" json:"efsFsRelativeMntPoint,omitempty"`
	XXX_unrecognized      []byte                                  `json:"-"`
}

func (m *ContainerInfo_EfsConfigInfo) Reset()                    { *m = ContainerInfo_EfsConfigInfo{} }
func (m *ContainerInfo_EfsConfigInfo) String() string            { return proto.CompactTextString(m) }
func (*ContainerInfo_EfsConfigInfo) ProtoMessage()               {}
func (*ContainerInfo_EfsConfigInfo) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4, 2} }

func (m *ContainerInfo_EfsConfigInfo) GetEfsFsId() string {
	if m != nil && m.EfsFsId != nil {
		return *m.EfsFsId
	}
	return ""
}

func (m *ContainerInfo_EfsConfigInfo) GetMountPoint() string {
	if m != nil && m.MountPoint != nil {
		return *m.MountPoint
	}
	return ""
}

func (m *ContainerInfo_EfsConfigInfo) GetMntPerms() ContainerInfo_EfsConfigInfo_MountPerms {
	if m != nil && m.MntPerms != nil {
		return *m.MntPerms
	}
	return ContainerInfo_EfsConfigInfo_RW
}

func (m *ContainerInfo_EfsConfigInfo) GetEfsFsRelativeMntPoint() string {
	if m != nil && m.EfsFsRelativeMntPoint != nil {
		return *m.EfsFsRelativeMntPoint
	}
	return ""
}

type ContainerInfo_Capabilities struct {
	Add              []ContainerInfo_Capabilities_Capability `protobuf:"varint,1,rep,name=add,enum=messages.ContainerInfo_Capabilities_Capability" json:"add,omitempty"`
	Drop             []ContainerInfo_Capabilities_Capability `protobuf:"varint,2,rep,name=drop,enum=messages.ContainerInfo_Capabilities_Capability" json:"drop,omitempty"`
	XXX_unrecognized []byte                                  `json:"-"`
}

func (m *ContainerInfo_Capabilities) Reset()                    { *m = ContainerInfo_Capabilities{} }
func (m *ContainerInfo_Capabilities) String() string            { return proto.CompactTextString(m) }
func (*ContainerInfo_Capabilities) ProtoMessage()               {}
func (*ContainerInfo_Capabilities) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4, 3} }

func (m *ContainerInfo_Capabilities) GetAdd() []ContainerInfo_Capabilities_Capability {
	if m != nil {
		return m.Add
	}
	return nil
}

func (m *ContainerInfo_Capabilities) GetDrop() []ContainerInfo_Capabilities_Capability {
	if m != nil {
		return m.Drop
	}
	return nil
}

type ContainerInfo_MetatronCreds struct {
	AppMetadata      *string `protobuf:"bytes,1,req,name=appMetadata" json:"appMetadata,omitempty"`
	MetadataSig      *string `protobuf:"bytes,2,req,name=metadataSig" json:"metadataSig,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ContainerInfo_MetatronCreds) Reset()                    { *m = ContainerInfo_MetatronCreds{} }
func (m *ContainerInfo_MetatronCreds) String() string            { return proto.CompactTextString(m) }
func (*ContainerInfo_MetatronCreds) ProtoMessage()               {}
func (*ContainerInfo_MetatronCreds) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4, 4} }

func (m *ContainerInfo_MetatronCreds) GetAppMetadata() string {
	if m != nil && m.AppMetadata != nil {
		return *m.AppMetadata
	}
	return ""
}

func (m *ContainerInfo_MetatronCreds) GetMetadataSig() string {
	if m != nil && m.MetadataSig != nil {
		return *m.MetadataSig
	}
	return ""
}

// The s3 log location used when uploading logs
type ContainerInfo_S3LogLocation struct {
	Bucket           *string `protobuf:"bytes,1,req,name=bucket" json:"bucket,omitempty"`
	Prefix           *string `protobuf:"bytes,2,req,name=prefix" json:"prefix,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ContainerInfo_S3LogLocation) Reset()                    { *m = ContainerInfo_S3LogLocation{} }
func (m *ContainerInfo_S3LogLocation) String() string            { return proto.CompactTextString(m) }
func (*ContainerInfo_S3LogLocation) ProtoMessage()               {}
func (*ContainerInfo_S3LogLocation) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4, 7} }

func (m *ContainerInfo_S3LogLocation) GetBucket() string {
	if m != nil && m.Bucket != nil {
		return *m.Bucket
	}
	return ""
}

func (m *ContainerInfo_S3LogLocation) GetPrefix() string {
	if m != nil && m.Prefix != nil {
		return *m.Prefix
	}
	return ""
}

func init() {
	proto.RegisterType((*TaskStatusData)(nil), "messages.TaskStatusData")
	proto.RegisterType((*StateUpdate)(nil), "messages.StateUpdate")
	proto.RegisterType((*StateUpdates)(nil), "messages.StateUpdates")
	proto.RegisterType((*TaskInfo)(nil), "messages.TaskInfo")
	proto.RegisterType((*TaskInfo_EnvironmentVariable)(nil), "messages.TaskInfo.EnvironmentVariable")
	proto.RegisterType((*ContainerInfo)(nil), "messages.ContainerInfo")
	proto.RegisterType((*ContainerInfo_EnvironmentVariable)(nil), "messages.ContainerInfo.EnvironmentVariable")
	proto.RegisterType((*ContainerInfo_NetworkConfigInfo)(nil), "messages.ContainerInfo.NetworkConfigInfo")
	proto.RegisterType((*ContainerInfo_EfsConfigInfo)(nil), "messages.ContainerInfo.EfsConfigInfo")
	proto.RegisterType((*ContainerInfo_Capabilities)(nil), "messages.ContainerInfo.Capabilities")
	proto.RegisterType((*ContainerInfo_MetatronCreds)(nil), "messages.ContainerInfo.MetatronCreds")
	proto.RegisterType((*ContainerInfo_S3LogLocation)(nil), "messages.ContainerInfo.S3LogLocation")
	proto.RegisterEnum("messages.TaskInfo_Status", TaskInfo_Status_name, TaskInfo_Status_value)
	proto.RegisterEnum("messages.ContainerInfo_SnapshotPolicy", ContainerInfo_SnapshotPolicy_name, ContainerInfo_SnapshotPolicy_value)
	proto.RegisterEnum("messages.ContainerInfo_EfsConfigInfo_MountPerms", ContainerInfo_EfsConfigInfo_MountPerms_name, ContainerInfo_EfsConfigInfo_MountPerms_value)
	proto.RegisterEnum("messages.ContainerInfo_Capabilities_Capability", ContainerInfo_Capabilities_Capability_name, ContainerInfo_Capabilities_Capability_value)
}

func init() { proto.RegisterFile("netflix/titus/agent.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 1748 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x57, 0xdf, 0x76, 0xe2, 0xc8,
	0xd1, 0x1f, 0xc0, 0x7f, 0x0b, 0x83, 0xdb, 0x6d, 0xcf, 0xac, 0x86, 0x9d, 0x9d, 0x65, 0xf9, 0x66,
	0xe7, 0xf8, 0xdb, 0x6c, 0x3c, 0x13, 0x27, 0xe7, 0x24, 0x67, 0x6f, 0xf6, 0xc8, 0x42, 0xb6, 0x75,
	0x0c, 0x88, 0xb4, 0xc0, 0xac, 0x73, 0xc3, 0x69, 0xa3, 0x06, 0xf7, 0x5a, 0x48, 0x44, 0x6a, 0x3c,
	0xe3, 0x27, 0xc8, 0x7d, 0x1e, 0x24, 0xcf, 0x92, 0xd7, 0xc8, 0x75, 0x5e, 0x20, 0xa7, 0x5a, 0x02,
	0x83, 0x8d, 0x73, 0x36, 0xc9, 0x15, 0xfa, 0xfd, 0xaa, 0xba, 0xaa, 0xab, 0xba, 0xba, 0xaa, 0x81,
	0xd7, 0xa1, 0x50, 0xc3, 0x40, 0x7e, 0xfe, 0xa0, 0xa4, 0x9a, 0x26, 0x1f, 0xf8, 0x48, 0x84, 0xea,
	0x68, 0x12, 0x47, 0x2a, 0xa2, 0x5b, 0x63, 0x91, 0x24, 0x7c, 0x24, 0x92, 0xda, 0x11, 0x94, 0x3b,
	0x3c, 0xb9, 0xf5, 0x14, 0x57, 0xd3, 0xa4, 0xce, 0x15, 0xa7, 0x6f, 0x60, 0x5b, 0xc9, 0xb1, 0x48,
	0x14, 0x1f, 0x4f, 0x8c, 0x5c, 0x35, 0x7f, 0x58, 0x60, 0x0f, 0x44, 0xed, 0x16, 0x8a, 0xa8, 0x2b,
	0xba, 0x13, 0x9f, 0x2b, 0x41, 0xcb, 0x90, 0x97, 0xbe, 0x91, 0xab, 0xe6, 0x0e, 0xb7, 0x59, 0x5e,
	0xfa, 0xf4, 0x00, 0xd6, 0x13, 0x14, 0x1b, 0x79, 0x4d, 0xa5, 0x80, 0x1a, 0xb0, 0x99, 0x39, 0x34,
	0x0a, 0x9a, 0x9f, 0xc1, 0x65, 0x67, 0x6b, 0x5a, 0xb6, 0xe0, 0xec, 0x0c, 0x76, 0x16, 0x9c, 0x25,
	0xf4, 0xf7, 0x50, 0x4c, 0x1e, 0xb0, 0x91, 0xab, 0x16, 0x0e, 0x8b, 0xc7, 0x2f, 0x8f, 0x66, 0xc1,
	0x1c, 0x2d, 0x28, 0xb3, 0x45, 0xcd, 0xda, 0x5f, 0x0b, 0xb0, 0x85, 0x61, 0x3a, 0xe1, 0x30, 0xa2,
	0x55, 0x28, 0x0e, 0xa2, 0x50, 0x71, 0x19, 0x8a, 0xd8, 0x99, 0x6d, 0x7e, 0x91, 0xa2, 0xaf, 0x60,
	0x43, 0xa1, 0xb6, 0x9f, 0x85, 0x91, 0x21, 0x5a, 0x81, 0xad, 0x9b, 0x28, 0x51, 0x2d, 0x3e, 0x9e,
	0x05, 0x32, 0xc7, 0x18, 0x63, 0x12, 0xf0, 0x3b, 0xe1, 0xf8, 0x59, 0x1c, 0x33, 0x48, 0x7f, 0x03,
	0x1b, 0x89, 0x4e, 0xaf, 0xb1, 0x5e, 0xcd, 0x1d, 0x96, 0x8f, 0x5f, 0x3f, 0x6c, 0x78, 0xb6, 0xa7,
	0xa3, 0x34, 0xff, 0x2c, 0x53, 0x5c, 0x4c, 0xd8, 0xc6, 0x72, 0xc2, 0x7e, 0x82, 0x7d, 0x11, 0xde,
	0xc9, 0x38, 0x0a, 0xc7, 0x22, 0x54, 0x97, 0x3c, 0x96, 0xfc, 0x3a, 0x10, 0xc6, 0xa6, 0x4e, 0xc5,
	0xfb, 0x15, 0x96, 0xed, 0xa7, 0xda, 0x6c, 0x95, 0x89, 0xca, 0x8f, 0xb0, 0xbf, 0x42, 0x97, 0x52,
	0x58, 0x0b, 0x31, 0xde, 0x34, 0x4d, 0xfa, 0x1b, 0x4f, 0xf9, 0x8e, 0x07, 0xd3, 0xf9, 0x29, 0x6b,
	0x50, 0x3b, 0x82, 0x8d, 0x34, 0x0c, 0x5a, 0x84, 0x4d, 0xd6, 0x6d, 0xb5, 0x9c, 0xd6, 0x19, 0x79,
	0x41, 0x01, 0x36, 0x4e, 0x4d, 0xa7, 0x61, 0xd7, 0x49, 0x0e, 0x05, 0x5e, 0xc7, 0x6d, 0xb7, 0xed,
	0x3a, 0xc9, 0xd7, 0xfe, 0xf6, 0x1a, 0x4a, 0xd6, 0x3c, 0xeb, 0x78, 0x32, 0x6f, 0x60, 0x5b, 0x8e,
	0xf9, 0x48, 0xb4, 0x1e, 0x1c, 0x3e, 0x10, 0x98, 0x94, 0x41, 0x34, 0x1e, 0xf3, 0x70, 0x76, 0x2c,
	0x33, 0x48, 0xdf, 0x43, 0x79, 0x7e, 0x7c, 0xed, 0x28, 0x56, 0x49, 0x76, 0x3a, 0x8f, 0x58, 0x5a,
	0x85, 0xcd, 0x3b, 0x11, 0x27, 0x32, 0x0a, 0xd3, 0x33, 0xfa, 0x61, 0x23, 0xc0, 0xba, 0x52, 0x6c,
	0x46, 0x53, 0xbe, 0x3a, 0xbd, 0xeb, 0x3a, 0xbd, 0xbf, 0x7a, 0x48, 0xef, 0xd2, 0xbe, 0x57, 0xe5,
	0xf8, 0x24, 0x6f, 0xe4, 0x56, 0xe6, 0x19, 0x93, 0xf7, 0x73, 0x74, 0xed, 0xf8, 0xd9, 0xc9, 0xa6,
	0x80, 0x1e, 0xc2, 0x6e, 0x10, 0x8d, 0xba, 0x93, 0x20, 0xe2, 0x3e, 0x13, 0x23, 0xf1, 0x79, 0x62,
	0x6c, 0x6a, 0xf9, 0x63, 0x9a, 0x7e, 0x84, 0xbd, 0x31, 0xff, 0x7c, 0x2e, 0x78, 0xa0, 0x6e, 0x4e,
	0xb9, 0x0c, 0xa6, 0xb1, 0x48, 0x8c, 0xad, 0x6a, 0xee, 0xb0, 0xa4, 0x7d, 0x3e, 0x15, 0xd2, 0xef,
	0xa0, 0x7c, 0xa3, 0x19, 0xeb, 0x46, 0x0c, 0x6e, 0xad, 0xb1, 0x6f, 0x6c, 0x57, 0x0b, 0x87, 0xdb,
	0x5a, 0xfd, 0x91, 0x84, 0x32, 0x28, 0x27, 0x21, 0x9f, 0x24, 0x37, 0x91, 0x6a, 0x47, 0x81, 0x1c,
	0xdc, 0x1b, 0xa0, 0x8b, 0xf6, 0xfd, 0x73, 0xb1, 0x7b, 0x4b, 0xda, 0xa9, 0xcd, 0x65, 0x0b, 0xf4,
	0x1d, 0x94, 0x44, 0xa8, 0xe2, 0xfb, 0x49, 0x24, 0x43, 0x85, 0xee, 0x8b, 0xe8, 0x9e, 0x2d, 0x93,
	0xcb, 0x5a, 0x9e, 0x8a, 0x8d, 0x92, 0x8e, 0x7f, 0x99, 0xc4, 0x22, 0xe0, 0x93, 0x89, 0x2e, 0x90,
	0x72, 0x5a, 0x04, 0x19, 0xc4, 0xf5, 0x3f, 0x47, 0xd7, 0x67, 0x71, 0x34, 0x9d, 0x78, 0x8a, 0x0f,
	0x6e, 0x8d, 0xdd, 0x74, 0xfd, 0x12, 0x89, 0xa5, 0x32, 0x23, 0xea, 0x42, 0x71, 0x19, 0x18, 0x24,
	0x2d, 0x95, 0x65, 0x96, 0xbe, 0x05, 0x90, 0x7c, 0xdc, 0x8e, 0xa3, 0xa1, 0x0c, 0x84, 0xb1, 0xa7,
	0x75, 0x16, 0x18, 0xda, 0x83, 0xbd, 0x50, 0xa8, 0x4f, 0x51, 0x7c, 0x6b, 0x45, 0xe1, 0x50, 0x8e,
	0x30, 0x17, 0x06, 0xad, 0xe6, 0x0e, 0x8b, 0xc7, 0xff, 0xff, 0x5c, 0xaa, 0x5a, 0x8f, 0x17, 0xb0,
	0xa7, 0x36, 0xe8, 0x77, 0x40, 0xe6, 0x3b, 0x16, 0x7f, 0x9e, 0x8a, 0x70, 0x20, 0x8c, 0x7d, 0xed,
	0xfe, 0x09, 0x8f, 0xc9, 0x08, 0xa7, 0xe3, 0xb3, 0xc9, 0x34, 0x31, 0x0e, 0xb0, 0x00, 0xd8, 0x0c,
	0xd2, 0x0b, 0x28, 0x89, 0x61, 0xb2, 0xb0, 0xb5, 0x97, 0xba, 0x82, 0xbf, 0x7d, 0xb6, 0x82, 0x17,
	0x95, 0xd9, 0xf2, 0x5a, 0x7a, 0x0e, 0x3b, 0x03, 0x3e, 0xe1, 0xd7, 0x32, 0x90, 0x4a, 0x8a, 0xc4,
	0x78, 0xa5, 0xc3, 0x7c, 0xf7, 0x9c, 0x2d, 0x6b, 0x41, 0x97, 0x2d, 0xad, 0xc4, 0x6d, 0x8d, 0x85,
	0xe2, 0x2a, 0x8e, 0x42, 0x2b, 0x16, 0x7e, 0x62, 0x7c, 0xa1, 0x4d, 0x3d, 0xbb, 0xad, 0xe6, 0xa2,
	0x32, 0x5b, 0x5e, 0x4b, 0x2f, 0x61, 0x77, 0x9a, 0x88, 0xb8, 0x1d, 0x47, 0x77, 0xd2, 0x17, 0xbe,
	0x1d, 0xde, 0x19, 0x86, 0x8e, 0xf2, 0xfb, 0xe7, 0xcc, 0x75, 0x97, 0xd5, 0x6d, 0xac, 0x2c, 0xf6,
	0xd8, 0x08, 0xbd, 0x02, 0xa2, 0x27, 0xe6, 0xa2, 0xe1, 0xd7, 0xda, 0xf0, 0xaf, 0x9f, 0x33, 0xdc,
	0x79, 0xa4, 0x9f, 0x5a, 0x7e, 0x62, 0x06, 0x47, 0x8f, 0xee, 0x67, 0x75, 0x39, 0x12, 0x89, 0x32,
	0x2a, 0xe9, 0xe8, 0x59, 0xa0, 0xe8, 0x31, 0x1c, 0xf0, 0x20, 0x88, 0x3e, 0x65, 0xb5, 0x72, 0x32,
	0x8d, 0x13, 0x25, 0xc3, 0x91, 0xf1, 0x65, 0x35, 0x77, 0xb8, 0xc5, 0x56, 0xca, 0xb0, 0x77, 0xdc,
	0xca, 0x20, 0xe8, 0x71, 0xa9, 0x3c, 0x31, 0x88, 0x42, 0x3f, 0x31, 0xde, 0xe8, 0x72, 0x78, 0x4c,
	0xd3, 0xef, 0x61, 0x4f, 0x8e, 0xc2, 0x28, 0x16, 0x0d, 0x3e, 0x0d, 0x07, 0x37, 0x67, 0x53, 0x1e,
	0xfb, 0xc6, 0x57, 0xda, 0xf4, 0x53, 0x01, 0xfd, 0x1d, 0xbc, 0xcc, 0xfc, 0x25, 0x4a, 0xf8, 0xf3,
	0x88, 0x13, 0xe3, 0xad, 0x5e, 0xb1, 0x5a, 0x48, 0x3f, 0xc2, 0xfe, 0x70, 0x1a, 0x04, 0xf7, 0x7f,
	0x9c, 0xf2, 0x40, 0x0e, 0xa5, 0xf0, 0x1d, 0x0c, 0xcf, 0xf8, 0x5a, 0xc7, 0xba, 0x4a, 0x84, 0x25,
	0xaf, 0x4d, 0x59, 0x93, 0xe9, 0x3c, 0xde, 0xaa, 0x76, 0xf1, 0x84, 0xc7, 0xee, 0x79, 0xcd, 0xd5,
	0xe0, 0xc6, 0xf8, 0x46, 0x2b, 0xa4, 0x80, 0x36, 0xa1, 0x9c, 0xfc, 0xb6, 0x11, 0x8d, 0x1a, 0xd1,
	0x80, 0x2b, 0x19, 0x85, 0x89, 0x51, 0xfb, 0xf7, 0xf5, 0xee, 0x2d, 0x6a, 0xb3, 0x47, 0x8b, 0xff,
	0xe7, 0x51, 0x58, 0xf9, 0x4b, 0x0e, 0xf6, 0x9e, 0xdc, 0x76, 0x7c, 0x3e, 0x88, 0x50, 0x36, 0xf8,
	0xb5, 0x08, 0xf4, 0x53, 0x60, 0x9b, 0xcd, 0x31, 0xf6, 0xa5, 0x44, 0x0c, 0xa6, 0xb1, 0x54, 0xf7,
	0xfa, 0x8e, 0xe3, 0x08, 0xc3, 0x26, 0xf9, 0x88, 0xa5, 0x47, 0x40, 0xaf, 0x79, 0xe8, 0x7f, 0x92,
	0xbe, 0xba, 0x69, 0xc8, 0xb1, 0x54, 0xcd, 0xeb, 0x49, 0xa2, 0xa7, 0x59, 0x89, 0xad, 0x90, 0x54,
	0xfe, 0x99, 0x83, 0xd2, 0xd2, 0xe5, 0xc6, 0xa6, 0x21, 0x86, 0xc9, 0x69, 0xa2, 0x9f, 0x3e, 0x79,
	0xec, 0xa0, 0x19, 0xc4, 0x9e, 0x37, 0x8e, 0xa6, 0xa1, 0x6a, 0x63, 0xb3, 0x35, 0xf2, 0x5a, 0xb8,
	0xc0, 0xd0, 0x06, 0x6c, 0x8d, 0x43, 0xd5, 0x16, 0xf1, 0x38, 0x1d, 0xb0, 0xe5, 0xe3, 0x8f, 0xbf,
	0xa8, 0x9f, 0x1c, 0x35, 0xb5, 0x0d, 0x5c, 0xc7, 0xe6, 0x16, 0xb0, 0xba, 0xb4, 0x63, 0x26, 0x02,
	0xae, 0xe4, 0x9d, 0x68, 0xce, 0x1c, 0xa7, 0xcf, 0xa7, 0xd5, 0xc2, 0xda, 0x3b, 0x80, 0x07, 0x6b,
	0x74, 0x03, 0xf2, 0xac, 0x47, 0x72, 0xfa, 0xd7, 0x25, 0x79, 0xfc, 0xed, 0xb9, 0xa4, 0x50, 0xf9,
	0xc7, 0x3a, 0xec, 0x2c, 0xb6, 0x21, 0x6a, 0x42, 0x81, 0xfb, 0xbe, 0x7e, 0x31, 0x96, 0x8f, 0x3f,
	0xfc, 0x92, 0xce, 0xf5, 0x00, 0xee, 0x19, 0xae, 0xa5, 0x16, 0xac, 0xf9, 0x71, 0x34, 0x31, 0xf2,
	0xff, 0x9d, 0x0d, 0xbd, 0xb8, 0xf6, 0xf7, 0x35, 0x80, 0x07, 0x92, 0x6e, 0xc3, 0xba, 0x75, 0xee,
	0xf6, 0x5a, 0xe4, 0x05, 0x25, 0xb0, 0x53, 0x37, 0xad, 0xbe, 0x7b, 0x69, 0x33, 0xe6, 0xd4, 0x6d,
	0x92, 0xa3, 0xfb, 0xb0, 0x8b, 0x0c, 0xb3, 0xcd, 0x7a, 0xdf, 0xb3, 0x4d, 0x66, 0x9d, 0x93, 0xbc,
	0x7e, 0x4d, 0xb9, 0xbd, 0x96, 0xcd, 0x48, 0x41, 0x7f, 0x7b, 0x76, 0xc7, 0xa9, 0x93, 0x35, 0xba,
	0x05, 0x6b, 0x17, 0x4e, 0xa3, 0x41, 0xd6, 0x91, 0xf5, 0xec, 0xce, 0x99, 0x53, 0x27, 0x1b, 0xd9,
	0x77, 0xd7, 0xa9, 0x93, 0x4d, 0xfd, 0xf6, 0xb2, 0x3b, 0x6d, 0xcb, 0x6c, 0x93, 0x2d, 0xb4, 0xdd,
	0x70, 0x5a, 0xdd, 0x9f, 0xfa, 0x4e, 0xb3, 0xd9, 0xed, 0x98, 0x27, 0x0d, 0x9b, 0x6c, 0xd3, 0x03,
	0x20, 0x2d, 0xbb, 0xd3, 0x3f, 0x71, 0x5a, 0xe8, 0x90, 0x5d, 0x3a, 0x96, 0x4d, 0x80, 0xee, 0x41,
	0x49, 0xb3, 0xcc, 0x35, 0xeb, 0x96, 0xe9, 0x75, 0x48, 0x91, 0x96, 0x60, 0x1b, 0x29, 0xb3, 0xde,
	0x74, 0x5a, 0x64, 0x07, 0x2d, 0x23, 0x64, 0x66, 0x8f, 0x94, 0xe8, 0x0e, 0x6c, 0x39, 0x6d, 0xab,
	0xdf, 0x70, 0xad, 0x0b, 0x52, 0x46, 0x4d, 0x44, 0xe9, 0x8e, 0x77, 0x69, 0x19, 0xc0, 0xbb, 0xf2,
	0xfa, 0x4d, 0xb7, 0xde, 0x6d, 0xd8, 0x84, 0xa0, 0x18, 0x31, 0x33, 0x7b, 0x8e, 0x4b, 0xf6, 0x66,
	0x62, 0xeb, 0x9c, 0xb9, 0x6e, 0x87, 0xd0, 0x19, 0x6e, 0x77, 0x98, 0x69, 0xd9, 0x64, 0x7f, 0xa6,
	0xde, 0x36, 0x2d, 0xab, 0x43, 0x0e, 0x66, 0x30, 0xdd, 0xc6, 0x4b, 0xf4, 0x8c, 0xf0, 0x04, 0xd7,
	0xbe, 0x9a, 0xa1, 0x16, 0x06, 0xf1, 0x05, 0x66, 0x57, 0x3b, 0xb2, 0x3d, 0xb7, 0xcb, 0x2c, 0x9b,
	0x18, 0x33, 0x79, 0xc7, 0x69, 0xda, 0xe4, 0x35, 0xa5, 0x50, 0xd6, 0xa8, 0x73, 0xd5, 0xb7, 0xdc,
	0xd6, 0xa9, 0x73, 0x46, 0x2a, 0x78, 0x38, 0xcd, 0x8b, 0x96, 0x5b, 0x27, 0x5f, 0xe2, 0x67, 0xc3,
	0x36, 0x3d, 0x9b, 0xbc, 0xa1, 0xbb, 0x50, 0x34, 0xbb, 0x75, 0xa7, 0xd3, 0xef, 0x31, 0xa7, 0x63,
	0x93, 0xaf, 0x30, 0x3f, 0x29, 0x61, 0xb9, 0xad, 0x0e, 0x73, 0x1b, 0xe4, 0x6d, 0x96, 0xea, 0x53,
	0x4c, 0xf5, 0xd7, 0xe8, 0xba, 0xb9, 0x78, 0xb0, 0x55, 0xdc, 0x37, 0x32, 0xe9, 0xbe, 0xbf, 0xd1,
	0x87, 0x74, 0xe5, 0x35, 0xdc, 0x33, 0x52, 0xc3, 0x88, 0x7b, 0xe6, 0x85, 0xdd, 0x37, 0x1b, 0x26,
	0x6b, 0x92, 0xff, 0x43, 0xe3, 0x27, 0x98, 0xca, 0xbe, 0xd7, 0xf5, 0xda, 0x76, 0xab, 0x4e, 0xde,
	0xa1, 0x4a, 0xea, 0x0f, 0x0b, 0x83, 0x7c, 0x5b, 0xf1, 0xa0, 0xb4, 0x34, 0x26, 0x71, 0xc8, 0xf0,
	0xc9, 0x04, 0x39, 0x9f, 0x2b, 0x9e, 0x5d, 0xf2, 0x45, 0x0a, 0x35, 0xc6, 0xd9, 0xb7, 0x27, 0x47,
	0xd9, 0x4d, 0x5f, 0xa4, 0x2a, 0x27, 0x70, 0xb0, 0x6a, 0x58, 0x52, 0x02, 0x85, 0x5b, 0x71, 0x9f,
	0x75, 0x40, 0xfc, 0x5c, 0xdd, 0x00, 0x7f, 0xc8, 0xff, 0x21, 0x57, 0xb1, 0xe0, 0xe5, 0xca, 0xb9,
	0xf8, 0x1f, 0x19, 0xf9, 0x11, 0x4a, 0x4b, 0xbd, 0x1a, 0xff, 0x9b, 0x5d, 0x4f, 0x07, 0xb7, 0x42,
	0x65, 0x81, 0x65, 0x08, 0xf9, 0x49, 0x2c, 0x86, 0xf2, 0x73, 0x16, 0x4e, 0x86, 0x6a, 0x0e, 0x94,
	0x97, 0x9f, 0xa8, 0x78, 0x98, 0x2d, 0xfb, 0xd2, 0x66, 0xe4, 0x05, 0xe6, 0xd2, 0x66, 0xcc, 0x65,
	0x7d, 0xb7, 0xd5, 0xb8, 0x22, 0x39, 0x5d, 0x26, 0x5d, 0xcb, 0xb2, 0x3d, 0x2f, 0x65, 0xf4, 0x7d,
	0x33, 0x1b, 0x3d, 0xf3, 0xca, 0x23, 0x85, 0x93, 0x8f, 0x50, 0x91, 0xd1, 0x91, 0x92, 0x8a, 0x87,
	0xc3, 0x98, 0x8f, 0x05, 0xb6, 0xf7, 0x79, 0x1b, 0x38, 0x29, 0x76, 0x50, 0xd0, 0xc6, 0xff, 0xd7,
	0xc9, 0x9f, 0xd6, 0xf5, 0xe8, 0xff, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0x96, 0xc0, 0xce, 0x33,
	0x83, 0x0f, 0x00, 0x00,
}
