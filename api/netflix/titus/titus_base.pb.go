// Code generated by protoc-gen-go. DO NOT EDIT.
// source: netflix/titus/titus_base.proto

/*
Package titus is a generated protocol buffer package.

It is generated from these files:
	netflix/titus/titus_base.proto
	netflix/titus/titus_agent_api.proto
	netflix/titus/agent.proto

It has these top-level messages:
	UserIdentity
	Page
	Pagination
	RetryPolicy
	ResourceDimension
	InstanceLifecycleStatus
	InstanceOverrideStatus
	HealthStatus
	InstanceGroupLifecycleStatus
	AgentInstance
	AutoScaleRule
	AgentInstanceGroup
	AgentChangeEvent
	AgentQuery
	Id
	AgentInstanceGroups
	AgentInstances
	TierUpdate
	AutoScalingRuleUpdate
	InstanceGroupLifecycleStateUpdate
	InstanceOverrideStateUpdate
	TaskStatusData
	StateUpdate
	StateUpdates
	TaskInfo
	ContainerInfo
*/
package titus

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/ptypes/any"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// / Titus scheduler tier (see Titus scheduler documentation for more information).
type Tier int32

const (
	// / Tier for running latency insensitive batch workloads.
	Tier_Flex Tier = 0
	// / Tier for running latency sensitive workloads.
	Tier_Critical Tier = 1
)

var Tier_name = map[int32]string{
	0: "Flex",
	1: "Critical",
}
var Tier_value = map[string]int32{
	"Flex":     0,
	"Critical": 1,
}

func (x Tier) String() string {
	return proto.EnumName(Tier_name, int32(x))
}
func (Tier) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// / Disk mount permission mask
type MountPerm int32

const (
	// / Read only
	MountPerm_RO MountPerm = 0
	// Write only
	MountPerm_WO MountPerm = 1
	// Read/write
	MountPerm_RW MountPerm = 2
)

var MountPerm_name = map[int32]string{
	0: "RO",
	1: "WO",
	2: "RW",
}
var MountPerm_value = map[string]int32{
	"RO": 0,
	"WO": 1,
	"RW": 2,
}

func (x MountPerm) String() string {
	return proto.EnumName(MountPerm_name, int32(x))
}
func (MountPerm) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// / Caller's identity, and their security context.
type UserIdentity struct {
	// / (Required) A unique user identifier. Depending on user type (a person or an application), the format
	// of the id may be different. For example a person's id could be encoded as 'person:<email-address>', and
	// application id as 'app:<aws-account-id>:<app-name>:<app-stack>'.
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// / (Optional) Security context data associated with the user (for example user roles). The following names are
	// reserved, and should be used if applicable:
	// * name - caller's name
	// * email - caller's email address
	SecurityContext map[string]string `protobuf:"bytes,2,rep,name=securityContext" json:"securityContext,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *UserIdentity) Reset()                    { *m = UserIdentity{} }
func (m *UserIdentity) String() string            { return proto.CompactTextString(m) }
func (*UserIdentity) ProtoMessage()               {}
func (*UserIdentity) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *UserIdentity) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UserIdentity) GetSecurityContext() map[string]string {
	if m != nil {
		return m.SecurityContext
	}
	return nil
}

// / An entity representing single page of a collection. Either pageNumber or cursor must be set on requests.
type Page struct {
	// / (Optional) Requested page number, starting from 0 (defaults to 0 if not specified).
	PageNumber int32 `protobuf:"varint,1,opt,name=pageNumber" json:"pageNumber,omitempty"`
	// / (Required) Requested page size (if not specified, default size is operation specific).
	PageSize int32 `protobuf:"varint,2,opt,name=pageSize" json:"pageSize,omitempty"`
	// / (Optional) The position in the collection from which the next page should be returned. If the cursor value is set, it is
	// always used, irrespective of the page number set.
	Cursor string `protobuf:"bytes,3,opt,name=cursor" json:"cursor,omitempty"`
}

func (m *Page) Reset()                    { *m = Page{} }
func (m *Page) String() string            { return proto.CompactTextString(m) }
func (*Page) ProtoMessage()               {}
func (*Page) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Page) GetPageNumber() int32 {
	if m != nil {
		return m.PageNumber
	}
	return 0
}

func (m *Page) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *Page) GetCursor() string {
	if m != nil {
		return m.Cursor
	}
	return ""
}

// / An entity representing pagination information returned to a client iterating over its elements.
// It includes current page that the client requested, and the total collection size.
// As not always pageCount * pageSize == itemCount, the item count is included as well.
type Pagination struct {
	// / (Required) Requested page details.
	CurrentPage *Page `protobuf:"bytes,1,opt,name=currentPage" json:"currentPage,omitempty"`
	// / Are there any more items to return.
	HasMore bool `protobuf:"varint,2,opt,name=hasMore" json:"hasMore,omitempty"`
	// / Total number of pages.
	TotalPages int32 `protobuf:"varint,3,opt,name=totalPages" json:"totalPages,omitempty"`
	// / Total number of items.
	TotalItems int32 `protobuf:"varint,4,opt,name=totalItems" json:"totalItems,omitempty"`
	// / The last retrieved item's position in the collection. The cursor value can be sent on a subsequent request to
	// get the next page of items. Using cursors, instead of page numbers, will guarantee that all items are
	// retrieved with a potential of items being duplicated.
	Cursor string `protobuf:"bytes,5,opt,name=cursor" json:"cursor,omitempty"`
	// / Position of the cursor relative to totalItems. It can be used to determine what pageNumber would overlap with a
	// cursor, or to provide an idea of progress when walking all pages. Valid values are [0, totalItems-1].
	CursorPosition int32 `protobuf:"varint,6,opt,name=cursorPosition" json:"cursorPosition,omitempty"`
}

func (m *Pagination) Reset()                    { *m = Pagination{} }
func (m *Pagination) String() string            { return proto.CompactTextString(m) }
func (*Pagination) ProtoMessage()               {}
func (*Pagination) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Pagination) GetCurrentPage() *Page {
	if m != nil {
		return m.CurrentPage
	}
	return nil
}

func (m *Pagination) GetHasMore() bool {
	if m != nil {
		return m.HasMore
	}
	return false
}

func (m *Pagination) GetTotalPages() int32 {
	if m != nil {
		return m.TotalPages
	}
	return 0
}

func (m *Pagination) GetTotalItems() int32 {
	if m != nil {
		return m.TotalItems
	}
	return 0
}

func (m *Pagination) GetCursor() string {
	if m != nil {
		return m.Cursor
	}
	return ""
}

func (m *Pagination) GetCursorPosition() int32 {
	if m != nil {
		return m.CursorPosition
	}
	return 0
}

// / Retry polices.
type RetryPolicy struct {
	// / (Required) Retry policy.
	//
	// Types that are valid to be assigned to Policy:
	//	*RetryPolicy_Immediate_
	//	*RetryPolicy_Delayed_
	//	*RetryPolicy_ExponentialBackOff_
	Policy isRetryPolicy_Policy `protobuf_oneof:"Policy"`
}

func (m *RetryPolicy) Reset()                    { *m = RetryPolicy{} }
func (m *RetryPolicy) String() string            { return proto.CompactTextString(m) }
func (*RetryPolicy) ProtoMessage()               {}
func (*RetryPolicy) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type isRetryPolicy_Policy interface {
	isRetryPolicy_Policy()
}

type RetryPolicy_Immediate_ struct {
	Immediate *RetryPolicy_Immediate `protobuf:"bytes,1,opt,name=immediate,oneof"`
}
type RetryPolicy_Delayed_ struct {
	Delayed *RetryPolicy_Delayed `protobuf:"bytes,2,opt,name=delayed,oneof"`
}
type RetryPolicy_ExponentialBackOff_ struct {
	ExponentialBackOff *RetryPolicy_ExponentialBackOff `protobuf:"bytes,3,opt,name=exponentialBackOff,oneof"`
}

func (*RetryPolicy_Immediate_) isRetryPolicy_Policy()          {}
func (*RetryPolicy_Delayed_) isRetryPolicy_Policy()            {}
func (*RetryPolicy_ExponentialBackOff_) isRetryPolicy_Policy() {}

func (m *RetryPolicy) GetPolicy() isRetryPolicy_Policy {
	if m != nil {
		return m.Policy
	}
	return nil
}

func (m *RetryPolicy) GetImmediate() *RetryPolicy_Immediate {
	if x, ok := m.GetPolicy().(*RetryPolicy_Immediate_); ok {
		return x.Immediate
	}
	return nil
}

func (m *RetryPolicy) GetDelayed() *RetryPolicy_Delayed {
	if x, ok := m.GetPolicy().(*RetryPolicy_Delayed_); ok {
		return x.Delayed
	}
	return nil
}

func (m *RetryPolicy) GetExponentialBackOff() *RetryPolicy_ExponentialBackOff {
	if x, ok := m.GetPolicy().(*RetryPolicy_ExponentialBackOff_); ok {
		return x.ExponentialBackOff
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RetryPolicy) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RetryPolicy_OneofMarshaler, _RetryPolicy_OneofUnmarshaler, _RetryPolicy_OneofSizer, []interface{}{
		(*RetryPolicy_Immediate_)(nil),
		(*RetryPolicy_Delayed_)(nil),
		(*RetryPolicy_ExponentialBackOff_)(nil),
	}
}

func _RetryPolicy_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RetryPolicy)
	// Policy
	switch x := m.Policy.(type) {
	case *RetryPolicy_Immediate_:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Immediate); err != nil {
			return err
		}
	case *RetryPolicy_Delayed_:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Delayed); err != nil {
			return err
		}
	case *RetryPolicy_ExponentialBackOff_:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ExponentialBackOff); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("RetryPolicy.Policy has unexpected type %T", x)
	}
	return nil
}

func _RetryPolicy_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RetryPolicy)
	switch tag {
	case 1: // Policy.immediate
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RetryPolicy_Immediate)
		err := b.DecodeMessage(msg)
		m.Policy = &RetryPolicy_Immediate_{msg}
		return true, err
	case 2: // Policy.delayed
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RetryPolicy_Delayed)
		err := b.DecodeMessage(msg)
		m.Policy = &RetryPolicy_Delayed_{msg}
		return true, err
	case 3: // Policy.exponentialBackOff
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RetryPolicy_ExponentialBackOff)
		err := b.DecodeMessage(msg)
		m.Policy = &RetryPolicy_ExponentialBackOff_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _RetryPolicy_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RetryPolicy)
	// Policy
	switch x := m.Policy.(type) {
	case *RetryPolicy_Immediate_:
		s := proto.Size(x.Immediate)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RetryPolicy_Delayed_:
		s := proto.Size(x.Delayed)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RetryPolicy_ExponentialBackOff_:
		s := proto.Size(x.ExponentialBackOff)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// / Re-run immediately.
type RetryPolicy_Immediate struct {
	// / Maximum number of retries.
	Retries uint32 `protobuf:"varint,1,opt,name=retries" json:"retries,omitempty"`
}

func (m *RetryPolicy_Immediate) Reset()                    { *m = RetryPolicy_Immediate{} }
func (m *RetryPolicy_Immediate) String() string            { return proto.CompactTextString(m) }
func (*RetryPolicy_Immediate) ProtoMessage()               {}
func (*RetryPolicy_Immediate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

func (m *RetryPolicy_Immediate) GetRetries() uint32 {
	if m != nil {
		return m.Retries
	}
	return 0
}

// / Re-run after a given delay.
type RetryPolicy_Delayed struct {
	// / Initial delay in milliseconds.
	InitialDelayMs uint64 `protobuf:"varint,1,opt,name=initialDelayMs" json:"initialDelayMs,omitempty"`
	// / Subsequenet delays in milliseconds.
	DelayMs uint64 `protobuf:"varint,2,opt,name=delayMs" json:"delayMs,omitempty"`
	// / Maximum number of retries.
	Retries uint32 `protobuf:"varint,3,opt,name=retries" json:"retries,omitempty"`
}

func (m *RetryPolicy_Delayed) Reset()                    { *m = RetryPolicy_Delayed{} }
func (m *RetryPolicy_Delayed) String() string            { return proto.CompactTextString(m) }
func (*RetryPolicy_Delayed) ProtoMessage()               {}
func (*RetryPolicy_Delayed) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 1} }

func (m *RetryPolicy_Delayed) GetInitialDelayMs() uint64 {
	if m != nil {
		return m.InitialDelayMs
	}
	return 0
}

func (m *RetryPolicy_Delayed) GetDelayMs() uint64 {
	if m != nil {
		return m.DelayMs
	}
	return 0
}

func (m *RetryPolicy_Delayed) GetRetries() uint32 {
	if m != nil {
		return m.Retries
	}
	return 0
}

// / Exponential back-off retry policy.
type RetryPolicy_ExponentialBackOff struct {
	// / Initial delay in milliseconds.
	InitialDelayMs uint64 `protobuf:"varint,1,opt,name=initialDelayMs" json:"initialDelayMs,omitempty"`
	// / Upper bound on delay interval.
	MaxDelayIntervalMs uint64 `protobuf:"varint,2,opt,name=maxDelayIntervalMs" json:"maxDelayIntervalMs,omitempty"`
	// / Maximum number of retries.
	Retries uint32 `protobuf:"varint,3,opt,name=retries" json:"retries,omitempty"`
}

func (m *RetryPolicy_ExponentialBackOff) Reset()         { *m = RetryPolicy_ExponentialBackOff{} }
func (m *RetryPolicy_ExponentialBackOff) String() string { return proto.CompactTextString(m) }
func (*RetryPolicy_ExponentialBackOff) ProtoMessage()    {}
func (*RetryPolicy_ExponentialBackOff) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{3, 2}
}

func (m *RetryPolicy_ExponentialBackOff) GetInitialDelayMs() uint64 {
	if m != nil {
		return m.InitialDelayMs
	}
	return 0
}

func (m *RetryPolicy_ExponentialBackOff) GetMaxDelayIntervalMs() uint64 {
	if m != nil {
		return m.MaxDelayIntervalMs
	}
	return 0
}

func (m *RetryPolicy_ExponentialBackOff) GetRetries() uint32 {
	if m != nil {
		return m.Retries
	}
	return 0
}

// / Instance resource dimensions
type ResourceDimension struct {
	Cpu         uint32 `protobuf:"varint,1,opt,name=cpu" json:"cpu,omitempty"`
	Gpu         uint32 `protobuf:"varint,2,opt,name=gpu" json:"gpu,omitempty"`
	MemoryMB    uint32 `protobuf:"varint,3,opt,name=memoryMB" json:"memoryMB,omitempty"`
	DiskMB      uint32 `protobuf:"varint,4,opt,name=diskMB" json:"diskMB,omitempty"`
	NetworkMbps uint32 `protobuf:"varint,5,opt,name=networkMbps" json:"networkMbps,omitempty"`
}

func (m *ResourceDimension) Reset()                    { *m = ResourceDimension{} }
func (m *ResourceDimension) String() string            { return proto.CompactTextString(m) }
func (*ResourceDimension) ProtoMessage()               {}
func (*ResourceDimension) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ResourceDimension) GetCpu() uint32 {
	if m != nil {
		return m.Cpu
	}
	return 0
}

func (m *ResourceDimension) GetGpu() uint32 {
	if m != nil {
		return m.Gpu
	}
	return 0
}

func (m *ResourceDimension) GetMemoryMB() uint32 {
	if m != nil {
		return m.MemoryMB
	}
	return 0
}

func (m *ResourceDimension) GetDiskMB() uint32 {
	if m != nil {
		return m.DiskMB
	}
	return 0
}

func (m *ResourceDimension) GetNetworkMbps() uint32 {
	if m != nil {
		return m.NetworkMbps
	}
	return 0
}

func init() {
	proto.RegisterType((*UserIdentity)(nil), "com.netflix.titus.UserIdentity")
	proto.RegisterType((*Page)(nil), "com.netflix.titus.Page")
	proto.RegisterType((*Pagination)(nil), "com.netflix.titus.Pagination")
	proto.RegisterType((*RetryPolicy)(nil), "com.netflix.titus.RetryPolicy")
	proto.RegisterType((*RetryPolicy_Immediate)(nil), "com.netflix.titus.RetryPolicy.Immediate")
	proto.RegisterType((*RetryPolicy_Delayed)(nil), "com.netflix.titus.RetryPolicy.Delayed")
	proto.RegisterType((*RetryPolicy_ExponentialBackOff)(nil), "com.netflix.titus.RetryPolicy.ExponentialBackOff")
	proto.RegisterType((*ResourceDimension)(nil), "com.netflix.titus.ResourceDimension")
	proto.RegisterEnum("com.netflix.titus.Tier", Tier_name, Tier_value)
	proto.RegisterEnum("com.netflix.titus.MountPerm", MountPerm_name, MountPerm_value)
}

func init() { proto.RegisterFile("netflix/titus/titus_base.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 687 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x54, 0xdd, 0x6e, 0xe2, 0x46,
	0x14, 0xc6, 0xe6, 0x27, 0x70, 0x08, 0x29, 0x19, 0x45, 0x2d, 0xe5, 0x22, 0x8d, 0xa8, 0x1a, 0x45,
	0xb9, 0x70, 0x54, 0xda, 0x4a, 0x6d, 0x2f, 0x9d, 0xa4, 0x82, 0x0b, 0x1a, 0x34, 0x49, 0x15, 0x29,
	0x17, 0x5d, 0x0d, 0xf6, 0xc1, 0x3b, 0xc2, 0xf6, 0xa0, 0xf1, 0x38, 0x8b, 0xf7, 0x01, 0xf6, 0x6e,
	0x1f, 0x62, 0x5f, 0x65, 0xdf, 0x64, 0xdf, 0x64, 0x35, 0x63, 0xc3, 0x3a, 0x81, 0x55, 0xf6, 0x06,
	0xe6, 0xfb, 0xce, 0x77, 0xbe, 0xef, 0xcc, 0x30, 0x03, 0x1c, 0xc7, 0xa8, 0xe6, 0x21, 0x5f, 0x5d,
	0x28, 0xae, 0xd2, 0x24, 0xff, 0x7c, 0x35, 0x63, 0x09, 0x3a, 0x4b, 0x29, 0x94, 0x20, 0x87, 0x9e,
	0x88, 0x9c, 0x42, 0xe3, 0x98, 0x6a, 0xff, 0xc7, 0x40, 0x88, 0x20, 0xc4, 0x0b, 0x23, 0x98, 0xa5,
	0xf3, 0x0b, 0x16, 0x67, 0xb9, 0x7a, 0xf0, 0xd1, 0x82, 0xfd, 0xff, 0x12, 0x94, 0x63, 0x1f, 0x63,
	0xc5, 0x55, 0x46, 0x0e, 0xc0, 0xe6, 0x7e, 0xcf, 0x3a, 0xb1, 0xce, 0x5a, 0xd4, 0xe6, 0x3e, 0xf9,
	0x1f, 0xbe, 0x4b, 0xd0, 0x4b, 0x25, 0x57, 0xd9, 0xa5, 0x88, 0x15, 0xae, 0x54, 0xcf, 0x3e, 0xa9,
	0x9e, 0xb5, 0x87, 0xbf, 0x3b, 0x5b, 0x41, 0x4e, 0xd9, 0xc9, 0xb9, 0x7d, 0xda, 0x76, 0x1d, 0x2b,
	0x99, 0xd1, 0xe7, 0x66, 0x7d, 0x17, 0x8e, 0x76, 0x09, 0x49, 0x17, 0xaa, 0x0b, 0xcc, 0x8a, 0x41,
	0xf4, 0x92, 0x1c, 0x41, 0xfd, 0x91, 0x85, 0x29, 0xf6, 0x6c, 0xc3, 0xe5, 0xe0, 0x6f, 0xfb, 0x4f,
	0x6b, 0xf0, 0x00, 0xb5, 0x29, 0x0b, 0x90, 0x1c, 0x03, 0x2c, 0x59, 0x80, 0xff, 0xa6, 0xd1, 0x0c,
	0xa5, 0x69, 0xad, 0xd3, 0x12, 0x43, 0xfa, 0xd0, 0xd4, 0xe8, 0x96, 0xbf, 0xcd, 0x4d, 0xea, 0x74,
	0x83, 0xc9, 0xf7, 0xd0, 0xf0, 0x52, 0x99, 0x08, 0xd9, 0xab, 0x1a, 0xfb, 0x02, 0x0d, 0x3e, 0x59,
	0x00, 0x53, 0x16, 0xf0, 0x98, 0x29, 0x2e, 0x62, 0xf2, 0x17, 0xb4, 0xbd, 0x54, 0x4a, 0x8c, 0x95,
	0x4e, 0x34, 0x19, 0xed, 0xe1, 0x0f, 0x3b, 0x8e, 0x42, 0x97, 0x69, 0x59, 0x4b, 0x7a, 0xb0, 0xf7,
	0x9a, 0x25, 0x13, 0x21, 0xf3, 0xf0, 0x26, 0x5d, 0x43, 0x3d, 0xb7, 0x12, 0x8a, 0x85, 0x5a, 0x96,
	0x98, 0xfc, 0x3a, 0x2d, 0x31, 0x9b, 0xfa, 0x58, 0x61, 0x94, 0xf4, 0x6a, 0xa5, 0xba, 0x61, 0x4a,
	0xb3, 0xd7, 0xcb, 0xb3, 0x93, 0x53, 0x38, 0xc8, 0x57, 0x53, 0x91, 0x70, 0x3d, 0x7e, 0xaf, 0x61,
	0x7a, 0x9f, 0xb1, 0x83, 0x0f, 0x35, 0x68, 0x53, 0x54, 0x32, 0x9b, 0x8a, 0x90, 0x7b, 0x19, 0x19,
	0x41, 0x8b, 0x47, 0x11, 0xfa, 0x9c, 0xa9, 0xf5, 0x16, 0xcf, 0x76, 0x6c, 0xb1, 0xd4, 0xe2, 0x8c,
	0xd7, 0xfa, 0x51, 0x85, 0x7e, 0x69, 0x26, 0x2e, 0xec, 0xf9, 0x18, 0xb2, 0x0c, 0x7d, 0xb3, 0xe7,
	0xf6, 0xf0, 0xf4, 0x05, 0x9f, 0xab, 0x5c, 0x3d, 0xaa, 0xd0, 0x75, 0x23, 0xf1, 0x80, 0xe0, 0x6a,
	0x29, 0x62, 0x7d, 0xad, 0x58, 0xe8, 0x32, 0x6f, 0x71, 0x33, 0x9f, 0x9b, 0x53, 0x6a, 0x0f, 0x7f,
	0x7d, 0xc1, 0xee, 0x7a, 0xab, 0x71, 0x54, 0xa1, 0x3b, 0xec, 0xfa, 0xbf, 0x40, 0x6b, 0xb3, 0x05,
	0xfd, 0x4b, 0x49, 0x54, 0x92, 0x63, 0x62, 0x76, 0xdf, 0xa1, 0x6b, 0xd8, 0x47, 0xd8, 0x2b, 0x26,
	0xd4, 0x87, 0xcb, 0x63, 0xae, 0x3d, 0x0c, 0x33, 0xc9, 0xb5, 0x35, 0xfa, 0x8c, 0xd5, 0x66, 0x7e,
	0x21, 0xb0, 0x8d, 0x60, 0x0d, 0xcb, 0x31, 0xd5, 0xa7, 0x31, 0xef, 0x2c, 0x20, 0xdb, 0xa3, 0x7f,
	0x73, 0xa4, 0x03, 0x24, 0x62, 0x2b, 0x83, 0xc6, 0xb1, 0x42, 0xf9, 0xc8, 0xc2, 0x4d, 0xfa, 0x8e,
	0xca, 0xd7, 0x07, 0x71, 0x9b, 0xd0, 0xc8, 0x4f, 0x72, 0xf0, 0xde, 0x82, 0x43, 0x8a, 0x89, 0x48,
	0xa5, 0x87, 0x57, 0x3c, 0xc2, 0x38, 0xd1, 0xcf, 0xa1, 0x0b, 0x55, 0x6f, 0x99, 0x16, 0xa7, 0xa4,
	0x97, 0x9a, 0x09, 0x96, 0xa9, 0x09, 0xeb, 0x50, 0xbd, 0xd4, 0xaf, 0x2e, 0xc2, 0x48, 0xc8, 0x6c,
	0xe2, 0x16, 0xf6, 0x1b, 0xac, 0x6f, 0xae, 0xcf, 0x93, 0xc5, 0xc4, 0x35, 0xb7, 0xba, 0x43, 0x0b,
	0x44, 0x4e, 0xa0, 0x1d, 0xa3, 0x7a, 0x23, 0xe4, 0x62, 0x32, 0x5b, 0x26, 0xe6, 0x5a, 0x77, 0x68,
	0x99, 0x3a, 0x3f, 0x86, 0xda, 0x1d, 0x47, 0x49, 0x9a, 0x50, 0xfb, 0x27, 0xc4, 0x55, 0xb7, 0x42,
	0xf6, 0xa1, 0x79, 0x29, 0xb9, 0xe2, 0x1e, 0x0b, 0xbb, 0xd6, 0xf9, 0xcf, 0xd0, 0x9a, 0x88, 0x34,
	0x56, 0x53, 0x94, 0x11, 0x69, 0x80, 0x4d, 0x6f, 0xba, 0x15, 0xfd, 0x7d, 0x7f, 0xd3, 0xb5, 0x0c,
	0xbe, 0xef, 0xda, 0xee, 0x1f, 0xf0, 0xd3, 0xf6, 0xfd, 0x09, 0xe4, 0xd2, 0xcb, 0xff, 0x1d, 0x03,
	0x8c, 0xdd, 0xd6, 0x9d, 0x26, 0x5d, 0x96, 0xe0, 0xd4, 0x7a, 0xa8, 0x1b, 0xc5, 0xac, 0x61, 0xaa,
	0xbf, 0x7d, 0x0e, 0x00, 0x00, 0xff, 0xff, 0xc2, 0x74, 0xc8, 0x89, 0x8b, 0x05, 0x00, 0x00,
}
