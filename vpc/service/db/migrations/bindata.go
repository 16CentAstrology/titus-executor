package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var __1_init_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\x0e\x71\x0c\x0a\x51\x08\x09\x72\xf4\x0b\x76\x74\x0e\xf1\xf4\xf7\x53\xb0\xe6\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\x28\x4d\xca\xc9\x4c\xd6\xcb\x2c\x88\x4f\x4c\x49\x29\x4a\x2d\x2e\x4e\x2d\xc6\x26\x5f\x52\x54\x5a\x5c\x92\x9a\x12\x0f\xe1\xc6\x67\xa7\x56\xc2\x95\x45\x06\xc0\x55\x21\x64\xe3\x4b\x2a\x0b\x52\xad\xb9\x9c\xfd\x7d\x7d\x3d\x43\xac\x01\x01\x00\x00\xff\xff\x61\xd8\x8d\x0d\x84\x00\x00\x00")

func _1_init_down_sql() ([]byte, error) {
	return bindata_read(
		__1_init_down_sql,
		"1_init.down.sql",
	)
}

var __1_init_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\xd1\x8a\x9c\x30\x14\x7d\xf7\x2b\xee\xdb\xce\x42\x29\xb4\xb0\x0f\x65\x9e\xd2\x99\x50\xa4\x4e\xdc\x6a\x84\xce\x53\xc8\x98\xcb\x4c\x98\x1a\xc5\x24\xb4\xee\xd7\x17\x5d\xeb\x6c\x4b\xca\x9a\xbd\x2f\xa2\xe6\x9c\x24\xe7\x9c\x7b\x4b\x4e\x0a\x0e\xbc\x20\xac\x24\x3b\x9e\xe6\x0c\xb6\xc9\xae\xa0\x84\x53\xe0\xc7\x47\x0a\x9d\x3f\xfd\xd0\xf5\xfb\xe7\x87\xb8\xe2\x20\xdc\xd0\x21\x90\x12\x28\xab\x0e\xb0\x49\x00\x00\xee\x50\x7d\x7c\x78\xf8\xf0\xe9\x6e\x7a\xbb\xdf\x26\x0b\x05\xf9\x9c\x2d\x1c\xba\x13\x52\xa9\x1e\xad\x45\x3b\x03\x5f\x2d\xad\xc0\x7b\xad\x80\xe5\x1c\x58\x95\x65\xef\xd6\xc1\xe4\x13\x38\xfc\xe5\x56\xae\xee\xf1\xac\x5b\x13\x83\xb0\xfe\x64\xd0\x09\xad\x62\x40\xb2\xae\x5b\x6f\x5c\x0c\xe4\x26\x19\x68\x83\x6b\x51\x97\xb6\x41\x81\x46\xc7\xec\x74\x69\xad\x13\x37\x97\xe1\x34\x38\x94\x6f\xc3\x0a\xab\xcf\x46\x3a\xdf\x63\x14\x4b\x83\xd6\xca\xf3\x9b\x30\xff\xee\x98\xdc\x2f\x21\xae\x58\xfa\xad\xa2\x90\xb2\x3d\xfd\x0e\x2f\x13\x28\x74\xf7\x47\xda\x9c\x05\x23\x5a\x95\x29\xfb\x02\x27\xd7\x23\xc2\xe6\xf6\x67\x8c\x37\xc9\x38\x2d\xe6\x74\xe7\x2c\x3b\x86\xf0\xd3\x0d\xc8\x7e\x0f\xbb\x9c\x95\xbc\x20\x29\xe3\x7f\x1f\xa0\x1b\x75\x7e\x2c\xd2\x03\x29\x8e\xf0\x95\x1e\x61\xa3\xd5\x48\x1e\x6c\x1e\xd7\x7b\xeb\x50\xbd\x90\x79\x75\x0f\xcd\xb5\xb8\x1a\xdb\x4c\x73\x8d\x2e\x1b\xd9\x60\x4c\xaa\xe6\xaa\x7b\x94\xe3\xe1\xa5\x03\xa7\x1b\xb4\x4e\x36\x1d\xfc\xd4\xee\xd2\xfa\xe7\x2f\xf0\xd4\x1a\x8c\xe3\xbc\xe2\x30\x4d\xa2\xf0\x80\x4a\x26\x21\xff\x67\x53\x40\xcc\x90\x5b\x81\x65\x01\xd3\xae\x38\x4c\x13\x2f\x3f\x1c\x52\xbe\x4d\x7e\x07\x00\x00\xff\xff\xa8\x99\x59\xef\x51\x05\x00\x00")

func _1_init_up_sql() ([]byte, error) {
	return bindata_read(
		__1_init_up_sql,
		"1_init.up.sql",
	)
}

var __2_branch_enis_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xcd\xcd\xaa\xc2\x30\x10\xc5\xf1\x7d\x9f\x62\xde\xa3\xab\xdc\x34\x17\x02\xf6\x83\x66\x16\xba\x0a\x63\x3a\xd8\x62\x1b\x8b\x33\x79\x7f\x57\x82\x5d\x88\xeb\xdf\x39\xfc\x03\x9a\x11\x01\x47\xd3\x05\x63\xd1\xf7\x5d\x5d\x35\x63\x3f\x00\x9a\xbf\x93\x03\x49\x33\x4f\x65\xe5\x29\x2a\xc9\x5d\x0e\xb6\xec\x71\x25\xd1\x58\x84\xa7\x03\xf8\x7f\x70\x67\x1f\x30\xc0\xf5\x49\x39\xcd\x91\xf3\x12\x49\x95\xd2\xbc\x71\x56\x01\x6b\x82\x35\x8d\x83\x9f\xaf\x2f\x53\x4a\xe9\x51\xb2\xc6\x8d\xf6\x7d\xc9\xb7\xb7\x5d\x06\xf7\x59\x14\x25\xe5\xba\xaa\x6c\xdf\xb6\x1e\xeb\x57\x00\x00\x00\xff\xff\xe0\x35\x32\xce\xe9\x00\x00\x00")

func _2_branch_enis_down_sql() ([]byte, error) {
	return bindata_read(
		__2_branch_enis_down_sql,
		"2_branch_enis.down.sql",
	)
}

var __2_branch_enis_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\xcb\x6e\xe3\x3a\x0c\xdd\xfb\x2b\xb8\xab\x2f\x90\x2f\x68\x57\x41\xd1\x45\x17\x69\x2f\x52\xcf\x5a\x60\x2c\xa6\x15\x2c\xd3\x1e\x89\xea\x24\xfd\xfa\x81\x9d\xd8\x91\x1f\x79\x8d\x57\x11\x79\x28\x92\x87\x87\xca\x47\xb6\x5c\x67\x90\xad\x97\x6f\x1f\xcb\xe7\xec\xf5\xfd\x0d\x9e\x92\x24\x77\x84\x42\x20\xfb\x9a\x60\xe3\x90\xf3\x2f\x45\x6c\x94\x97\xc6\x8a\x1e\x88\x43\x09\xe9\x43\xe0\x82\xab\x3f\xfc\xb0\x80\x07\x14\xc1\xfc\x8b\x74\xf3\x3b\x70\x7f\xfa\x2f\xba\x0c\x37\x96\xc0\x37\xe6\x60\x49\x2b\x41\x5f\xf8\x24\x4d\x00\x00\x8c\x06\x4f\xce\xa0\x05\xae\x04\x38\x58\xdb\x9a\x9b\x2f\xaf\xd8\x8b\x43\xc3\x32\x8e\x55\x75\xd1\xa3\x9a\xaf\x76\xa6\x44\xb7\x87\x82\xf6\x8b\xd6\xc1\x58\x12\x08\xed\xa4\xbf\xf5\x60\xb7\xe8\x45\xb9\xc0\x20\xa6\x24\x2f\x58\xd6\xa0\x69\x8b\xc1\x0a\x3c\xff\x5a\xaf\x5f\xde\x32\x95\xbd\xae\x5e\x3e\xb2\xe5\xea\xff\x24\xea\x20\xb0\xf9\x1d\x08\x0c\x6b\xda\x4d\x8a\x69\x92\xa9\xd0\xfa\xda\x24\x15\x8f\x21\x90\x36\x98\x09\x23\xa6\x56\x6d\x41\xc1\x93\xee\xe8\xa8\x15\x6a\xed\xc8\x7b\x30\x4c\x72\x91\x94\x38\xfc\x2a\x23\x3d\xf2\xd4\x7a\xe4\x40\x6b\xab\x1c\x65\xea\x9d\x19\xcf\x39\x5a\x06\xe5\x18\x3d\x62\x24\xf6\x42\x6a\xf4\x84\x8c\x93\xd8\x3a\x69\x9c\x2c\xc3\x51\xce\x71\x11\x45\xab\xba\xa0\xfd\x65\x32\x0e\x89\xb5\x42\xb9\x45\x08\x87\x18\xcc\xf3\x2a\xb0\x28\xa3\xe7\x84\xe5\xc3\x86\xa9\x77\x9e\xe3\xee\x78\xd3\x4f\x04\xfa\xae\xf3\x2e\xea\x2c\xb3\x71\x73\x13\x62\x23\xe7\x15\x5e\xd5\x61\x37\x4b\x62\xb9\x6f\xfb\xe6\xaf\xb8\x2a\xb9\x7f\x9b\xdf\x20\x45\xdc\x79\x04\xd9\x0e\x33\x3b\xda\x92\x23\xce\xc9\x0f\x54\x14\x43\x2a\x06\x4d\x96\x84\x20\x47\x9f\xa3\xa6\xe3\xd8\xda\x67\x6d\xf2\xce\x75\x52\xe8\x9f\xb9\xc7\xc7\x09\x66\x38\x53\x71\x81\x8b\xbe\xd5\x6e\xfe\x3b\x30\x2c\xf4\x49\xee\x86\xd1\x9e\xe9\xfb\xec\xb4\x63\x3c\xa4\x27\xfb\x9d\x99\xfa\xc2\x95\xd1\xbb\x1b\x93\xf5\x31\x8b\xa6\xc7\x89\xe2\xba\x4d\x29\xb1\xae\x0d\x7f\xde\x25\xb5\x51\xec\x55\x8d\x1d\xf1\x73\x2b\x89\xdf\x68\x2c\x6e\x8c\x35\xb2\x57\x3f\x15\xcf\xfe\x21\x44\xeb\x77\x71\xa3\xaf\x3f\x7f\xe3\xca\xbb\xf3\xa4\x8c\x11\xc9\xa3\x38\x48\x8f\x86\xc5\xb4\x81\x26\x75\xf2\xfc\xbe\x5a\xbd\x66\x4f\x7f\x03\x00\x00\xff\xff\x44\xa0\xbb\x7a\xbd\x07\x00\x00")

func _2_branch_enis_up_sql() ([]byte, error) {
	return bindata_read(
		__2_branch_enis_up_sql,
		"2_branch_enis.up.sql",
	)
}

var _bindata_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x97\x4b\x6f\x2b\xc7\x11\x85\xd7\x9c\x5f\x31\x21\xe0\x80\x04\x04\x65\xde\x0f\x03\x77\x63\x23\xdb\x2c\xb2\x4d\x05\x44\xf7\x4c\xb7\x42\xe4\x8a\xd4\xe5\xc3\x2e\xdf\xc0\xff\x3d\xf8\xba\x5a\x80\x1c\xc9\x8b\xd8\x5e\x8c\xc8\x69\x76\x57\xd7\xe3\x9c\x53\xa5\x17\xb7\xfc\xdb\x3d\x85\xf2\xf9\xf8\x74\x71\xb7\xe3\xf9\x74\x2d\x8a\xe3\xf3\xcb\xf9\x72\x2b\x77\xc5\x66\xeb\x7f\xba\x85\xeb\xb6\xd8\x6c\x97\xf3\xf3\xcb\x25\x5c\xaf\x7f\x79\xfa\x7a\x7c\x61\x21\x3e\xdf\xf8\x38\x9e\xf9\x7b\xbd\x5d\x8e\xa7\xa7\xeb\xb6\xd8\x17\x45\xbc\x9f\x96\xd2\x1f\x4f\xab\xbb\xb9\xc3\x25\xb8\x75\xc7\xb7\xf2\x1f\xff\xc4\xd6\x43\x79\x72\xcf\xa1\xb4\xfd\xfb\x72\xf7\xba\x1a\x2e\x97\xf3\x65\x5f\xfe\xa7\xd8\x3c\x7d\x4d\x6f\xe5\xb7\x9f\x4a\xae\x7a\xfc\x5b\xf8\xf1\xef\xc1\xad\xe1\xb2\x4b\xbe\xf0\xfe\xdd\x3d\xc6\x70\x49\x66\xf7\xfb\x62\x73\x8c\xe9\xc0\x9f\x3e\x95\xa7\xe3\x67\x4c\x6c\x2e\xe1\x76\xbf\x9c\x78\x7d\x28\xe3\xf3\xed\xf1\xaf\x58\x8f\xbb\x2d\x86\xca\x6f\xbe\x7c\x5b\x7e\xf3\xc3\xd6\x3c\x49\x77\xed\x8b\xcd\xcf\x45\xb1\xf9\xc1\x5d\x4a\x7f\x8f\xa5\xdd\x63\x97\x14\x9b\x83\xb9\xf3\xa9\x3c\x9e\x1f\xbf\x3f\xbf\xfc\xb4\xfb\xb3\xbf\xc7\x87\xf2\xe9\xeb\x1e\x5f\x1f\xbf\xff\x7c\xbe\x86\xdd\xbe\xf8\xe3\xdc\xc8\xa7\xfc\x3d\x3e\x7e\x87\x27\xbb\xfd\x03\x26\x8a\x9f\x8b\x02\x0f\x0f\x87\xfa\x70\x3c\x1d\x6f\x87\xf5\xfc\xe3\xe9\x70\xfd\xf2\xb9\xfc\x94\x73\xbb\xdb\x8a\xd6\x51\x74\xf2\xa2\xd5\x24\x5a\x55\x1f\x3f\x31\x8a\x56\x4e\xb4\x0a\xa2\x63\x2d\x5a\x2d\xf6\xde\xd7\xf9\xdc\x2c\x3a\x36\xa2\xb1\x13\xad\xbc\xe8\x38\x88\x8e\x9d\xed\x8f\xb5\xad\xc7\x51\xb4\x6f\x45\x7d\x25\x1a\x06\xdb\xcf\xb9\xc8\x67\x14\xed\x2b\xb3\x85\x7d\xce\xb2\xce\xf7\xbe\x17\x6d\x26\x7b\xba\x55\x74\x71\xa2\xcb\x2c\xda\x2d\xa2\xeb\x20\xba\x78\xd1\x66\x11\x9d\xf8\x3d\xda\x7a\x37\x8b\x36\xec\x71\xa2\xcd\x2a\xda\x04\xd1\x2e\xd8\xf7\x65\x10\x6d\x06\xd1\x9e\x3b\x1b\xd1\xbe\x13\xed\x89\x65\x11\x9d\x1b\xd1\xd9\x89\xd6\xd9\xa7\x50\xdb\xfe\x61\x14\x75\xf8\xcf\x7d\xec\xe9\x45\xbb\x5e\xb4\xe2\xbd\xca\x3e\xd6\xa2\x43\x27\x1a\x5a\xd1\x0e\x9f\x9c\xe5\x82\x3b\xdc\x2a\xea\x67\xd1\x79\x11\x8d\xab\xe8\x98\x9f\x76\x15\xed\x5a\x51\x47\x3e\xeb\xfc\xbc\xc9\x39\xcf\x50\x8b\xae\x93\xe8\xb4\x8a\x56\xab\xe8\xd4\xbd\xad\xcd\xf6\x95\x3e\xff\x5b\xe3\xdd\x87\x54\x79\x45\xca\x5b\xae\x15\x9b\xcd\x3b\x84\x3c\x14\x9b\xcd\xd6\xd6\x1e\x59\x7b\xbc\x7e\xf9\xbc\x7d\x28\x36\xfb\x77\x98\xba\xbf\xfc\x66\x44\x91\x0d\xb2\xbf\xd6\xa2\x93\xb3\xf7\xb6\x12\xad\x3b\xcb\x0e\x88\x69\xbc\x68\x08\xa2\xab\x17\x5d\xa8\x62\x63\x95\xf5\x9d\x21\x89\x2a\x0d\xbd\xe8\xcc\x1e\x2a\x33\x1b\x92\x5c\x67\x15\x5f\x17\xd1\xc1\x59\xd6\x38\x0f\x02\x97\x49\x74\x9e\x0c\x39\xa0\x85\xef\x35\xa8\xa2\x8a\x9d\xd9\x4e\x77\x8e\xa2\x35\x55\x5f\x45\x83\x17\x1d\x16\xab\x2c\x08\x04\x25\x1e\x64\x45\x51\xd7\x18\xa2\xf1\x9f\xf3\x61\xb4\xef\xa3\xb7\xfd\xf8\xf1\xca\x1e\xcf\x9e\xca\x2a\xce\xde\xd6\x9b\xef\x9c\x87\x55\x7e\x30\x74\xbb\x20\xea\x2a\xf3\x1b\x9f\x43\x25\xba\x8c\xa2\xdd\x68\xb6\x66\xd0\x13\x0d\x4d\x2b\xf9\xec\x45\xa3\xb7\xbb\xa7\x51\xd4\x4f\xa2\xa1\xb1\xbb\xc8\x01\x7b\x40\xe8\x5c\x19\xba\x61\x93\xf3\xd9\xa7\xca\x18\xf3\x5a\x1b\x62\x27\x87\x09\xa5\xc4\x31\x89\x46\x1e\x7e\x9b\x45\x07\x54\x80\xf8\xbd\xe8\x1a\x8d\x4d\x20\xbd\xc2\x87\x8c\x72\x98\x56\x13\x0f\x6c\x6a\x33\x0b\x66\xd1\x3a\x18\x1b\x60\x0f\xb1\x57\xad\x31\x91\xfd\xac\xc3\x26\xf2\xc6\xf7\x89\xfb\x7a\xb3\xd3\x4f\xc6\x3a\x6a\x1d\x62\x66\x7e\x2d\x1a\x3a\xb3\xdf\xe2\xdf\x62\xfb\x61\x29\xf9\x0b\x59\x7d\xc8\x75\xef\x6d\xdf\x94\x15\x28\x06\x63\x2b\x79\x41\x85\xb8\x6f\x68\x44\xbb\x4a\xd4\x37\x76\x9e\x33\x43\x34\x65\xa0\x36\xdc\x45\xac\x35\x39\x98\xcc\xd6\xe0\x4d\x05\xe7\xd1\x6a\xd7\x81\xe5\x5a\xb4\x1b\xac\x5e\x61\x31\x35\x1b\xf2\x1d\xc9\xd7\xd1\xf6\xa3\x2e\x6d\x67\xbe\xcf\x9d\xdd\xb5\xb4\x56\x5f\x6a\xb3\x44\xb3\xd3\x3a\xcb\xf3\xd0\x1a\x37\xc0\x14\x77\xa7\x1c\x38\xd1\xd8\x8a\xce\xde\xb8\x03\xaf\x88\x1b\x4c\x53\x77\xf0\x49\xdd\x53\x3c\xe4\xc8\x99\x1f\x60\x76\xce\xb1\xa2\x42\xe0\x08\x2c\xb0\x1f\x1f\xc1\xc7\x98\x55\x1b\xcc\xad\x99\x9f\xd4\xb8\x69\x4d\x31\xa9\x07\x5c\x04\x77\x15\x98\x1a\x8d\x33\xfc\xbe\x64\x4e\xc4\xac\x9e\xd3\x62\x71\x83\x6d\xe2\xa5\xde\x21\x77\x09\x30\x8b\x82\x83\x87\x69\x30\x9c\xad\xad\xa9\x1d\x5c\x1d\x83\xf1\x1c\xbc\xe1\x03\xf7\xbe\xf2\x88\xfb\x51\xdc\x31\x9a\xee\xc0\x99\x9a\x0e\xd4\xdb\x39\xec\xa2\x0b\xe0\x8c\xbd\x53\x30\xfb\xd8\x00\x8b\xa8\xab\x23\x97\x28\xfa\x94\xd7\x16\xfb\x24\x16\xb0\x08\xf7\xe1\x03\x7c\x27\x67\xe3\x6c\xf6\xf1\x69\x41\xd9\x7b\xe3\x1b\x1a\xb2\x66\x4d\x19\x5b\x53\x6c\x3a\x0f\xfe\xac\x60\xa6\xb2\xdf\x9c\xb3\xd8\xf9\xc4\xfe\x9c\xbb\x06\x78\x70\xbd\xf9\x4a\xb7\xe1\x9c\xcf\x3a\xd6\x82\xbb\xd5\x30\xbe\xbe\xea\x53\x63\xf5\x4c\xf9\x8b\x39\x6f\x9d\xf9\x41\xbe\xb1\x49\x9e\xd0\x01\xb0\xd1\xe5\xba\xb3\x0f\x6e\xa5\xee\x38\x18\x3e\x52\xa7\xc9\x1d\x1a\x0e\x2c\x8b\xc5\x0a\x07\xc0\x33\xbc\xa3\x3b\x51\x17\xb0\x44\x0d\x89\x25\x61\x25\x9a\x16\x25\x9e\x36\xa2\x3e\xd8\x5d\xa9\x6e\xe3\xfb\x8e\xe6\xa6\xac\xd3\xb3\x71\x39\x4d\x11\xfd\xaf\x76\x34\xeb\x30\xbf\xad\x9f\xd9\xd9\xb7\xdd\xec\xfe\xf2\x41\x2f\x6b\x0e\xfe\xe2\x4e\xcb\xbf\x0e\xe1\x74\xbc\xfe\xbe\x31\x29\x35\x9a\xd5\x1e\x0a\xbc\xe4\xe4\xd7\x95\x35\x18\x04\x09\x61\x9d\xa3\x09\xce\x1a\x0c\x80\x10\x1e\xc2\x22\x08\x34\x1d\x08\x05\x79\x92\xc8\x50\xfc\xc1\xc4\x14\x71\x40\x08\x92\x28\x4c\x66\x03\xa0\xe0\x5b\xdb\x66\x70\x92\x54\x48\xd7\x58\xf3\x62\x34\x0a\x59\xac\xdb\xd9\x40\x04\xc8\xd2\xa8\x93\xc7\x8e\x44\xf2\xd6\x0a\x81\x7d\x9a\x72\xcc\xcd\x8f\xa7\xcd\xeb\x14\x9a\x58\x53\x03\xa4\x89\xb7\x66\x8b\x06\xc2\xfd\x5d\x6e\xc8\x21\x8b\x43\x93\xc7\xb5\x3e\x0b\x0c\x22\x99\x44\xb1\x16\x6d\x7a\xbb\x07\x61\x22\x6f\x80\x1e\x5b\x34\x1b\x62\x18\x2b\x03\x25\xb9\x27\x87\x4b\x6e\x74\xe9\xae\xd9\x72\x3c\xd7\x26\x80\x34\x35\xd6\x21\x36\xc4\xf0\xf9\x0e\x9a\x01\xf1\x21\xd4\xe4\x83\x38\x20\x26\x79\xa5\x06\x2e\x1a\x80\x13\xf0\x9d\x35\x38\x00\x89\x30\x32\xfa\xb1\x97\x3a\x50\x33\xe2\xf0\xa3\x3d\x29\x9e\x21\xe7\x68\x36\x61\x6e\x72\xdc\xd4\x89\xda\x23\x24\xe4\x9c\x98\x11\x94\x24\x24\xe3\x7b\xcc\x24\xd1\xae\xcc\xb7\xb6\xb1\x41\x25\xcc\x1f\x8f\x79\x1f\x43\xf5\xff\x64\xc7\xc7\x46\x12\x4d\x7e\xf1\xd3\xaf\xcd\x7e\xbf\x3c\xff\x7b\x47\xc0\xde\x46\x31\xc6\x8a\x90\x91\x4d\xbb\x5d\x57\x6b\x2d\x8c\x80\x3e\x8f\x2b\x54\x0a\x59\xe2\x93\x16\x4c\x36\x69\xb9\xa0\x88\x91\x02\xe6\xd0\x6a\x9b\x3c\xdc\xd3\x42\x69\x55\x48\x2f\xad\xc0\x51\x89\x3e\xb7\x85\xd6\xaa\x32\x21\x43\xce\xc6\x31\xda\x20\x92\x8a\xe4\x31\x62\xc1\x30\x10\x46\x3c\x30\x0b\x34\x70\x27\xac\xe1\x9d\x36\xc9\x3f\x0d\x53\x1e\xbb\x68\xc7\x5d\x1e\x05\x18\x1b\x40\x2f\xfe\xd2\x72\x69\xf9\x43\x6e\x53\x4b\x1e\xd5\x60\x42\x1a\xdd\xf2\x70\xcf\x28\x88\x3d\x7c\x19\x47\x63\x45\x97\xc7\x38\x72\x31\xe7\x58\xc8\x13\x76\x63\x96\x5f\x62\x07\x6d\xb4\x12\xee\x49\xc8\x75\x39\xbe\xc9\xfe\xc9\x60\xcc\x01\x55\x5d\x1e\x27\x61\x03\x39\x4d\x63\xe4\x62\x63\x11\x6d\x01\xc9\x06\xcd\x8c\x57\xac\x53\xc7\x34\x0a\xb4\xd6\xa2\xff\x1b\x00\x00\xff\xff\xd7\x3f\xc9\x2a\x00\x10\x00\x00")

func bindata_go() ([]byte, error) {
	return bindata_read(
		_bindata_go,
		"bindata.go",
	)
}

var _generate_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xc8\xc1\x0d\xc3\x30\x08\x05\xd0\x7b\xa6\x60\x01\xc2\xbd\xdb\xe0\x14\xfd\xd2\xc8\x60\xb9\x58\x5d\x3f\x57\xdf\x9e\x9e\x08\xf2\x05\x0b\x9b\x5a\x46\xc8\xe6\x41\x3c\x57\x10\x77\x82\xd7\x67\xb5\xf3\xca\x2e\xdf\x32\x5b\x7f\x0b\x41\x72\xf3\x78\x6b\xe9\x46\xe2\x71\x83\xba\x63\x6a\x79\xc6\x8f\xce\x63\xe8\x75\x2b\x6c\xcb\xe3\x09\x00\x00\xff\xff\x19\x31\x0d\xce\x6b\x00\x00\x00")

func generate_go() ([]byte, error) {
	return bindata_read(
		_generate_go,
		"generate.go",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"1_init.down.sql":        _1_init_down_sql,
	"1_init.up.sql":          _1_init_up_sql,
	"2_branch_enis.down.sql": _2_branch_enis_down_sql,
	"2_branch_enis.up.sql":   _2_branch_enis_up_sql,
	"bindata.go":             bindata_go,
	"generate.go":            generate_go,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"1_init.down.sql":        &_bintree_t{_1_init_down_sql, map[string]*_bintree_t{}},
	"1_init.up.sql":          &_bintree_t{_1_init_up_sql, map[string]*_bintree_t{}},
	"2_branch_enis.down.sql": &_bintree_t{_2_branch_enis_down_sql, map[string]*_bintree_t{}},
	"2_branch_enis.up.sql":   &_bintree_t{_2_branch_enis_up_sql, map[string]*_bintree_t{}},
	"bindata.go":             &_bintree_t{bindata_go, map[string]*_bintree_t{}},
	"generate.go":            &_bintree_t{generate_go, map[string]*_bintree_t{}},
}}
