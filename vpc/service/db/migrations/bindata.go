package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var __1_init_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\x0e\x71\x0c\x0a\x51\x08\x09\x72\xf4\x0b\x76\x74\x0e\xf1\xf4\xf7\x53\xb0\xe6\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\x28\x4d\xca\xc9\x4c\xd6\xcb\x2c\x88\x4f\x4c\x49\x29\x4a\x2d\x2e\x4e\x2d\xc6\x26\x5f\x52\x54\x5a\x5c\x92\x9a\x12\x0f\xe1\xc6\x67\xa7\x56\xc2\x95\x45\x06\xc0\x55\x21\x64\xe3\x4b\x2a\x0b\x52\xad\xb9\x9c\xfd\x7d\x7d\x3d\x43\xac\x01\x01\x00\x00\xff\xff\x61\xd8\x8d\x0d\x84\x00\x00\x00")

func _1_init_down_sql() ([]byte, error) {
	return bindata_read(
		__1_init_down_sql,
		"1_init.down.sql",
	)
}

var __1_init_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\xd1\x8a\x9c\x30\x14\x7d\xf7\x2b\xee\xdb\xce\x42\x29\xb4\xb0\x0f\x65\x9e\xd2\x99\x50\xa4\x4e\xdc\x6a\x84\xce\x53\xc8\x98\xcb\x4c\x98\x1a\xc5\x24\xb4\xee\xd7\x17\x5d\xeb\x6c\x4b\xca\x9a\xbd\x2f\xa2\xe6\x9c\x24\xe7\x9c\x7b\x4b\x4e\x0a\x0e\xbc\x20\xac\x24\x3b\x9e\xe6\x0c\xb6\xc9\xae\xa0\x84\x53\xe0\xc7\x47\x0a\x9d\x3f\xfd\xd0\xf5\xfb\xe7\x87\xb8\xe2\x20\xdc\xd0\x21\x90\x12\x28\xab\x0e\xb0\x49\x00\x00\xee\x50\x7d\x7c\x78\xf8\xf0\xe9\x6e\x7a\xbb\xdf\x26\x0b\x05\xf9\x9c\x2d\x1c\xba\x13\x52\xa9\x1e\xad\x45\x3b\x03\x5f\x2d\xad\xc0\x7b\xad\x80\xe5\x1c\x58\x95\x65\xef\xd6\xc1\xe4\x13\x38\xfc\xe5\x56\xae\xee\xf1\xac\x5b\x13\x83\xb0\xfe\x64\xd0\x09\xad\x62\x40\xb2\xae\x5b\x6f\x5c\x0c\xe4\x26\x19\x68\x83\x6b\x51\x97\xb6\x41\x81\x46\xc7\xec\x74\x69\xad\x13\x37\x97\xe1\x34\x38\x94\x6f\xc3\x0a\xab\xcf\x46\x3a\xdf\x63\x14\x4b\x83\xd6\xca\xf3\x9b\x30\xff\xee\x98\xdc\x2f\x21\xae\x58\xfa\xad\xa2\x90\xb2\x3d\xfd\x0e\x2f\x13\x28\x74\xf7\x47\xda\x9c\x05\x23\x5a\x95\x29\xfb\x02\x27\xd7\x23\xc2\xe6\xf6\x67\x8c\x37\xc9\x38\x2d\xe6\x74\xe7\x2c\x3b\x86\xf0\xd3\x0d\xc8\x7e\x0f\xbb\x9c\x95\xbc\x20\x29\xe3\x7f\x1f\xa0\x1b\x75\x7e\x2c\xd2\x03\x29\x8e\xf0\x95\x1e\x61\xa3\xd5\x48\x1e\x6c\x1e\xd7\x7b\xeb\x50\xbd\x90\x79\x75\x0f\xcd\xb5\xb8\x1a\xdb\x4c\x73\x8d\x2e\x1b\xd9\x60\x4c\xaa\xe6\xaa\x7b\x94\xe3\xe1\xa5\x03\xa7\x1b\xb4\x4e\x36\x1d\xfc\xd4\xee\xd2\xfa\xe7\x2f\xf0\xd4\x1a\x8c\xe3\xbc\xe2\x30\x4d\xa2\xf0\x80\x4a\x26\x21\xff\x67\x53\x40\xcc\x90\x5b\x81\x65\x01\xd3\xae\x38\x4c\x13\x2f\x3f\x1c\x52\xbe\x4d\x7e\x07\x00\x00\xff\xff\xa8\x99\x59\xef\x51\x05\x00\x00")

func _1_init_up_sql() ([]byte, error) {
	return bindata_read(
		__1_init_up_sql,
		"1_init.up.sql",
	)
}

var _bindata_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindata_go() ([]byte, error) {
	return bindata_read(
		_bindata_go,
		"bindata.go",
	)
}

var _generate_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xc8\xc1\x0d\xc3\x30\x08\x05\xd0\x7b\xa6\x60\x01\xc2\xbd\xdb\xe0\x14\xfd\xd2\xc8\x60\xb9\x58\x5d\x3f\x57\xdf\x9e\x9e\x08\xf2\x05\x0b\x9b\x5a\x46\xc8\xe6\x41\x3c\x57\x10\x77\x82\xd7\x67\xb5\xf3\xca\x2e\xdf\x32\x5b\x7f\x0b\x41\x72\xf3\x78\x6b\xe9\x46\xe2\x71\x83\xba\x63\x6a\x79\xc6\x8f\xce\x63\xe8\x75\x2b\x6c\xcb\xe3\x09\x00\x00\xff\xff\x19\x31\x0d\xce\x6b\x00\x00\x00")

func generate_go() ([]byte, error) {
	return bindata_read(
		_generate_go,
		"generate.go",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"1_init.down.sql": _1_init_down_sql,
	"1_init.up.sql":   _1_init_up_sql,
	"bindata.go":      bindata_go,
	"generate.go":     generate_go,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"1_init.down.sql": &_bintree_t{_1_init_down_sql, map[string]*_bintree_t{}},
	"1_init.up.sql":   &_bintree_t{_1_init_up_sql, map[string]*_bintree_t{}},
	"bindata.go":      &_bintree_t{bindata_go, map[string]*_bintree_t{}},
	"generate.go":     &_bintree_t{generate_go, map[string]*_bintree_t{}},
}}
