// Code generated by go-bindata.
// sources:
// filter.o
// DO NOT EDIT!

package filter

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _filterO = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\x3d\x8f\xd3\x40\x10\x7d\xfe\x48\xce\x47\x10\x42\x40\x71\x3a\xe0\x14\x72\x14\x14\x87\x15\xe0\x7e\xc0\x11\x44\xa0\x48\x81\x90\x22\xca\xc5\x58\x1b\x62\xc9\x89\x2c\xdb\x12\x01\x21\xa5\xa4\x43\x34\xe9\x29\x93\x8e\x2e\x25\xfc\x10\x7e\x00\xff\x80\x2e\x41\x5e\xcf\x2a\xce\xd8\x51\xb8\x91\xb2\x6f\xe7\x65\xdf\x9b\xd9\x49\x76\xfa\xbc\xd7\x35\x0d\x03\x3a\x0c\xfc\xc5\x26\xdb\xc4\x03\x6b\xb3\xbf\xa0\xf5\x10\x06\x96\x00\x4c\x00\xde\xcd\x57\x8a\xf5\x6e\xf4\x14\xfe\xbc\x9f\x9f\x3d\xb0\x81\x16\x80\x87\xe7\xd7\x54\x1e\x9c\x5e\x55\xb8\x24\xaf\xbe\xd5\x80\x93\xe9\x4e\x4f\x54\x7e\x64\x03\x8b\xd5\x62\xa5\x6b\x69\xff\xbb\xcf\xea\xb9\x7f\xeb\x58\xe1\x9b\x8c\xc4\x7a\xfd\xc2\x54\x4d\xe3\xb7\x09\x34\x01\xf8\xf7\x5e\x6e\xf9\xcf\x98\xcf\xfe\x3e\x9d\x2d\xbd\xee\xb7\x6f\xd5\xf2\x3e\x5b\x27\xff\x55\x5f\xd7\x7d\x1a\x79\xfe\x50\x36\x1f\xbb\xed\x3c\xbf\xae\xe7\xfc\xe9\x35\x9c\xcf\x0d\xe3\x36\x71\x47\xc4\xcf\x09\x6f\x01\x38\xa3\xfd\xa4\xe2\xf7\xe0\xf1\x45\xad\x16\xbe\x33\xfe\xab\x5a\x6d\x44\x15\x1a\x0b\x56\xa5\x97\x05\xbb\xc4\x09\xd5\x67\xad\xc4\x77\x15\x5f\xf6\x39\x53\x7c\xd9\xe7\x0e\xe1\x15\x55\x07\x68\x17\x72\x75\xda\x4d\xe5\x24\x85\x1f\x7a\x49\x12\x0c\x02\x19\x8b\x60\xfc\x3e\x96\x49\x52\xa4\x64\x89\xa1\x43\x62\x10\x84\xa9\x8c\xcb\x67\xf5\x17\x42\x84\x81\x2f\xc7\x89\x84\x1b\xcb\xd0\x95\x43\x31\x88\xbd\x91\x84\x9b\xa4\x71\xea\xbd\x83\x9b\x7c\x1c\x65\xd8\xeb\x74\xda\xe2\x3c\x83\x47\xe2\x49\xe5\x90\x2e\x19\x1f\xe8\xbe\x3c\xbe\x99\x39\xce\x18\xcf\xdf\xa0\x41\x9f\x3a\xe3\x2f\x76\xd4\xe3\x93\x3f\xde\xa3\x9f\x33\xde\x61\xf9\xc1\x0e\xfd\x1f\x42\xfe\x1f\xe5\x7a\x8f\xf4\x7c\x06\x6f\xe9\xa2\x0d\xc6\xf3\xfb\x8f\x88\x33\x19\x1f\x19\xdb\xf7\xd8\x55\x3f\x00\x70\x88\x72\x44\x64\xd8\x2c\xe8\xea\x05\xbd\x7e\xaf\xd3\x8a\xda\x59\xfc\xa0\xfa\xbf\x0a\x7d\xd7\x0a\x7a\xfd\xae\xff\x05\x00\x00\xff\xff\xa5\xe5\x03\x53\x68\x05\x00\x00")

func filterOBytes() ([]byte, error) {
	return bindataRead(
		_filterO,
		"filter.o",
	)
}

func filterO() (*asset, error) {
	bytes, err := filterOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "filter.o", size: 1384, mode: os.FileMode(436), modTime: time.Unix(1537829724, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"filter.o": filterO,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"filter.o": {filterO, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
