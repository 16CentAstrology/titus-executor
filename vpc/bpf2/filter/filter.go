package filter

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _filter_o = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x54\x3f\x68\x14\x4f\x14\xfe\xf6\x36\x97\xbb\xfc\x92\x9f\xe6\x9f\xf1\x88\x31\x84\x28\x12\x4e\x73\x66\xc3\x91\x9c\x5d\x88\x68\x52\x04\x0c\x8a\xf5\xba\x39\x36\xc9\xc2\x5d\x38\x77\x4f\x51\x11\x0d\x82\x22\x16\x76\x42\xca\x60\x65\x2a\x3b\xb5\x91\xb3\xb0\xb0\xb0\xb0\xb0\xb0\x50\xb0\x50\x48\x61\x91\x42\x30\x55\x56\x76\xe6\x6d\x6e\x7d\x3b\xc7\x19\x10\x71\x60\xf7\xcd\xf7\xcd\xfb\xff\x66\xf7\xf6\x99\xb9\xb3\x09\x4d\x43\xb8\x34\xfc\x40\x1d\xd5\xd7\xfd\x54\x7d\x3f\x45\xef\x0e\x68\xa8\xf5\x49\xce\x5a\x98\x97\xd2\x9a\x13\xb2\xd6\x23\xf9\x94\x0e\xec\x03\xf0\x1c\x40\x02\xc0\xe8\x91\x82\xe0\x2f\xf7\x76\x48\xd9\xf3\xbf\x90\x4b\x3a\x90\x06\x70\xee\xb4\xb4\x3b\xa0\x1f\xc2\xbd\x4f\xd2\x4e\x62\x03\xe9\x56\xe0\xa2\x7e\x52\xe8\x85\xfe\xa2\x71\x86\x85\xff\x13\x32\x8f\xee\x41\x21\x33\x3a\xb0\xb1\xb3\xb1\x13\xe6\x7e\x78\x7c\x84\xf2\xcd\x08\x59\xcc\x6e\xfa\x02\x77\xf5\x4b\xdc\xff\x4d\xe0\xda\x63\xf2\x9b\x00\x36\x7d\xdf\xcf\xb0\xa6\xdc\x15\xbd\x02\x6a\xc4\xef\xe6\xa9\x0d\x08\xe9\x74\x49\x3c\xa3\xc9\xae\x16\xfb\x66\x05\x4e\x22\xb3\xab\xcf\xf3\x9f\x10\xf9\xf7\xaa\xf3\xeb\x1e\x26\xbc\xed\x47\xeb\x2b\x66\xbf\x13\xa6\xfc\xb3\x5b\x54\x4f\xdf\x1f\xaa\x27\x41\x79\x7f\xf5\xa3\x79\x3f\xa2\xf3\xbd\xcf\x3f\xff\x9b\xf3\x3f\xc8\xe6\x3f\x4a\xf3\x3f\xde\x64\xfe\x8d\xe6\x3b\xf8\x8f\xcf\x77\x9c\xcd\x37\xc7\xe6\x9b\x65\xf3\x3d\xf6\x57\xe6\x1b\xa8\xa7\x89\xc3\x48\xdd\x5f\x22\xe2\x3b\xd0\xe9\x6d\xa2\x33\x33\x2f\xef\x45\x67\x68\x73\xe3\x3c\xd2\x37\xdb\xb5\xe0\x16\x64\xe8\x51\x19\x06\xdd\xce\x47\x8e\x3e\xab\x7e\x4e\x8a\xf5\x5e\xbc\x75\x6c\x31\xfd\xd7\xc4\x6f\x33\xfe\x19\xf1\xbc\x6f\x4f\x88\x2f\x30\xfe\xa3\x78\x27\xf1\x8e\xf1\x6f\x89\xff\xc0\xf8\x97\xc4\x6f\xb3\x3c\x9f\x12\xcf\xe3\xca\xa8\xba\xb2\x36\x1d\xc9\x18\x77\x4b\xf4\x36\x1d\xe3\x2f\x08\x3e\xee\xe7\x94\xe0\xe3\x7e\xae\x08\x3e\x15\xe3\x4b\xc4\x1f\x65\xfc\x26\xc9\x20\xfd\xe0\x3b\x7f\xa1\xd5\xf1\x7e\x00\x6f\xd8\xf9\x1a\x3b\x1f\x88\x9c\xb7\x01\x28\x44\xf0\x7f\xc1\x26\x57\xb5\xaf\x55\x91\x73\xed\x52\xb1\x64\x79\x9e\xb3\xe8\xd8\xae\xe9\xac\x2c\xb9\xb6\xe7\x71\xda\x96\x6c\xd9\xaa\x78\x88\x6b\x9b\x8b\x4e\xa9\x6a\xbb\x88\x19\x84\x07\x4e\xe5\xea\x84\x59\xb6\x2a\xc1\x26\x2f\x36\xa6\x69\x9a\x25\xa7\x68\xaf\x78\xb6\x88\x95\xb3\x97\xcd\x45\xd7\x2a\xdb\xc8\x79\x55\xb7\x6a\x2d\x20\xe7\x5d\x2f\x07\x72\x6e\x7a\x7a\xcc\x2c\x04\xc2\x30\x27\x25\x9a\x94\x68\x42\x22\x63\x5c\x42\xc3\x20\x6c\x10\x1e\x53\xce\x78\xaf\x6b\x4d\xdc\x8b\xf8\x5a\x6f\x95\xf2\x0b\xe3\xf9\x75\xd3\xe8\x69\x65\xfc\x54\x83\x78\x2d\x0c\x0f\x37\xb3\x4f\xfc\xca\xf3\x9b\x3a\x48\xf3\xe7\x6b\x8a\x1c\x0e\x11\x6e\xa7\x3a\x43\xfb\xce\x08\xaf\x8c\x4f\x71\xf9\x7f\x83\xc7\x4f\x35\x88\x7f\x49\x11\x3f\xa9\x88\x9f\xa7\xf8\x7c\x06\x43\xd4\xa8\x59\xc6\xf3\xfe\xdd\x69\x60\xbf\xdc\xa2\xd6\xe7\xf3\x7b\x48\x1c\x6b\x33\x2a\x64\x38\xcf\x78\x5e\xff\x83\x06\xf5\xaf\x2a\xea\x6f\x53\xd4\xbf\xae\x88\x1d\xac\x57\x14\x7f\x35\xf2\xdd\xb7\x47\xec\xc3\xff\xfe\xcf\x00\x00\x00\xff\xff\xdb\x98\xf3\xd5\x88\x0a\x00\x00")

func filter_o() ([]byte, error) {
	return bindata_read(
		_filter_o,
		"filter.o",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"filter.o": filter_o,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"filter.o": &_bintree_t{filter_o, map[string]*_bintree_t{}},
}}
