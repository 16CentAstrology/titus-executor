// Code generated by go-bindata. DO NOT EDIT.
// sources:
// default.json (11.909kB)
// fuse-container.json (13.415kB)

package seccomp

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _defaultJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x5a\x5f\x6f\x1b\xb9\x11\x7f\x96\x3f\x85\xa1\xe7\x1c\x60\xcb\x8e\xcf\xc9\x9b\xaa\xb8\xbd\xa0\x71\x9c\xda\x6e\xef\x0e\x45\x40\xd0\xbb\xb3\x2b\x56\xfc\x67\x0e\x57\xb6\x70\xc8\x77\x2f\xb8\x2b\x2d\x87\x5c\x5d\x1a\x45\x89\x8d\x22\x0f\x36\xf8\xfb\x91\x1c\xce\x0c\xc9\xe1\x90\xab\x3f\x0e\x46\xe3\x12\x2a\xde\x48\x3f\x2d\xbc\x30\x7a\xfc\xfa\x70\x7c\x33\xbb\xfc\xc0\xa6\xb3\x5b\x76\x71\x7d\xfd\xfe\x6a\xfc\xe2\x60\x34\xe6\xae\x98\x5f\x72\x3b\x7e\x7d\xf8\xef\x83\xd1\xe8\x8f\x83\xd1\xa8\xe3\x84\x87\xc2\x37\x0e\x62\xb7\xeb\xd9\x2f\xec\xb7\xf3\x33\x76\x76\x1a\x3a\x8e\x46\x63\x6c\xee\xa6\xa4\x25\xae\x65\x8c\x46\x69\x87\xae\x75\x42\x9e\x4c\xc6\x81\xfb\x78\x30\x1a\x7d\x7a\xf1\x05\xc3\x4e\xc3\xff\x9d\xc6\x9d\x5e\x5f\xee\x36\xc4\xe5\xdb\x0f\x37\x3b\x8d\x10\x3a\x0c\x4d\xeb\xc4\xbc\xdf\xd5\xc0\xd8\xed\xdb\x28\xb0\xfb\xe8\x17\xef\x76\xb6\xfe\xe2\xdd\xf6\xe1\x83\xa8\xaf\xf2\xc0\xa6\xe3\xb7\x53\x63\x37\x1d\x6e\x4e\x5e\x1d\xfd\xb6\xc3\xe8\xa1\x7d\x1c\xe1\x60\xf4\x31\x6c\x28\x5c\x61\xc1\xa5\xc4\x64\x47\x69\xae\xa8\x08\x5e\x14\x60\xfd\x46\xed\x0e\x9d\x52\x88\xd8\xa3\xf2\x3f\x5e\x28\x78\xec\xb1\xe4\x4e\x6d\xc0\x9d\xd0\x65\x5f\x76\x8b\x4d\xb1\xe0\xb6\x06\x4f\x10\x12\x34\x2f\x85\x8b\x40\x99\x32\x02\xf3\xa0\x13\xb0\x99\x8a\xd1\xb8\x90\xa6\x58\xb0\x1a\x7c\xf0\x44\xce\x05\xfd\x52\x52\x73\x6d\x50\x02\x58\x42\x63\x6c\x63\xb4\x86\x22\x6a\x64\xec\x8a\x55\x42\x02\x73\x5c\xd7\xb1\x95\x03\xde\xb7\x29\x1b\x4b\x8a\x13\x52\x3e\xd9\x94\xc1\x1a\x29\x59\xdb\x0b\xb6\x71\xc7\x19\xe9\xe5\x80\x60\x46\x96\x29\x69\x1f\xb8\xf0\x29\xb5\x9d\x49\xba\x2e\x41\xfb\x2a\x87\xbd\xd2\xf0\x08\xc5\x12\x52\x14\x2d\x85\x47\x91\x94\x59\xed\x4c\x34\xbe\xea\x16\x47\x6c\x5e\xf1\x72\x29\x10\xce\x4e\x07\x04\xa3\x9c\x94\xa6\x20\x7e\xa9\xb8\x36\x5e\x54\x2b\xa6\x78\x5c\x35\x55\xb2\x34\xaa\x64\x6d\x74\x88\x0c\x9b\x2c\x96\x2a\x5b\x2d\x1d\xa6\xad\x75\xf4\x76\x0b\x88\x6e\x25\xf7\x1c\x57\xba\xe8\x89\x1a\xfc\x23\xf7\x3e\x6a\x22\x05\xe6\x8c\x29\xa2\xda\x86\x98\xe0\x40\x99\x25\xa4\x8d\x31\x97\x87\x9e\xa8\x16\x00\xd1\x26\xc0\x01\x51\x61\x06\x69\x3d\x55\xdd\xbb\x46\x27\x7e\xde\x10\xa4\x43\xe3\xe3\x66\xae\x9a\xb0\x77\xc8\x74\xd6\xe0\x0b\xdb\x50\xf4\x50\x12\x54\x82\xf6\x98\xe3\x28\xbb\x06\x0f\xb5\x28\x33\x18\xe7\x25\x10\x4d\x5a\xdf\x64\xf5\x69\xf7\xbc\x77\xbb\x16\x71\x40\x24\x6d\x44\x30\xc9\x11\xc2\x02\xb8\x10\xff\x28\x95\x0e\x63\x6b\x67\x29\x4c\x2b\x33\xe8\x84\x71\xc2\xaf\x08\xe5\xb8\x2e\x8d\xa2\x04\x60\x3a\x40\x47\x24\x6a\x3a\xc0\x26\x6f\x93\x3b\xc3\x49\xa1\x04\x9d\x1b\xe6\xcc\x5d\x83\x9e\x85\x15\x49\xdb\x35\xc8\x6b\x6a\x1f\x26\x92\xd1\x14\x8b\xcc\x01\x81\x32\x36\x11\xed\xe7\x0e\x78\xc9\xb8\x03\x4e\x68\x9f\x48\x0a\xae\x35\x55\xc9\xa9\xf5\xa9\x15\xb9\x09\xc9\xca\x17\xeb\x5d\xcf\xcb\x92\x3d\x70\x5f\xcc\xf3\x0a\xa1\xa3\xb9\x94\x3b\xce\x49\xa7\x32\x01\x86\x15\x5c\x17\x20\x23\x41\x02\xac\x30\xac\x04\xf4\xce\xac\x08\x13\x56\xdf\x92\xae\x67\x61\xc2\xdc\x32\x72\x72\xad\x19\xa4\x4c\x40\x31\x1e\x06\xdc\xdc\x91\x49\x12\xb6\xdf\x8d\x0b\x21\x7b\x0d\x64\x12\xaf\x64\x16\xaf\x64\xee\x28\x29\xf4\x82\x96\xe3\x06\x0d\x33\x0f\x9a\xa2\xb4\xe3\x80\x61\x52\x22\x40\x94\xb6\x25\x42\xa5\x0d\xf2\x70\x25\x69\xb8\x92\x69\xb8\x52\x5d\xb0\xef\x21\xa8\xaa\xcc\x8e\x40\x25\x74\x61\x5c\x84\x0b\x12\xe3\x5b\x10\x85\xab\x85\x8e\x11\xbf\x05\xa4\x8e\x86\xdc\x16\x4c\x12\xc4\xa3\xaf\x95\xe2\x96\x96\x63\x43\xeb\x8c\x27\x07\xbf\xba\x0f\x93\x8d\xe0\xa9\xb9\xea\x9e\x75\x6b\x8c\x10\xc6\x46\x97\xab\x7b\x16\x76\x41\xe9\xa0\x00\x11\x8f\xd1\x0d\x8d\x10\x33\x22\x75\xcf\x1a\x4d\xa7\x52\x39\xa0\xba\x61\x4d\xd6\xa8\xc2\x9a\xac\x3c\x85\xb5\x2b\x96\x04\x21\x11\x4b\x43\xbe\x6a\x74\xe2\x99\x0e\x52\x6f\x34\x9a\x8c\x39\x48\x8c\x34\x3c\xac\xcf\x9c\x7e\xc1\x68\x78\x40\x90\xc4\x4f\xd4\xfc\x50\x8e\x6d\x2d\x6f\xe2\xec\x5b\x61\x93\x72\xef\xf7\x90\xa4\xf4\xe5\x04\x38\xe2\x00\x1b\xc2\x4f\x5c\x5a\x2d\x5c\xa6\x28\x4a\xec\x22\x23\x69\xdd\x69\xdc\xdf\xf5\xec\x83\x13\xf4\xd4\xeb\xf0\x32\x83\xbd\xbc\x20\x9d\x96\xf9\x3c\x23\xe8\x2c\x6e\x70\x74\x43\xa2\xaa\x83\x22\x29\x57\x2e\x9e\x0d\x01\x2b\x85\x75\x82\x29\x54\xdc\x76\xa9\xa8\xe5\x75\xcc\x74\xb7\xec\x59\x07\x34\xa2\x77\x88\x2a\xd4\x61\x62\x20\x7a\xee\x3c\x5b\x5f\x0e\x7a\x5a\x91\xdd\x18\xaa\x45\xcd\xbb\xcb\x7a\xc2\x59\xd0\xa5\xd0\x75\x46\x3a\x53\x28\x8e\x8b\x94\xbd\x6f\xa0\x01\xa1\x2b\x93\xd2\x0e\x7c\xe3\x32\xa9\xd8\xa0\x25\xbb\xa5\x23\xdb\x4d\x44\x53\x5c\xe7\x99\xaf\xb7\x09\xc6\x62\x0e\x65\xd8\xc0\xbc\xaa\xc2\x19\xb1\x1a\x56\x10\x7f\xf5\xa4\xe5\x8e\xab\x01\xcb\x36\xc7\x3a\x53\xfc\xf1\x73\xb5\x42\x0f\x6a\xdb\x42\x23\x21\x1b\xcb\xb9\xb6\xab\xd0\x1e\xdc\x92\xcb\xb4\x12\xff\x4c\x6d\xdc\xa6\x36\x6e\x55\x1b\xff\x74\xe8\x95\x80\x78\x1b\x40\x28\x0a\xa3\x6c\x84\x74\x6b\x23\x28\xb2\x05\x11\x14\x89\x41\x08\xca\x90\x6e\xaa\x9d\x1a\xca\xe8\x92\x96\xc3\xb2\xcd\x71\xdc\x80\x81\xa1\x2b\xbf\xc5\x29\xf4\x71\x6a\xc1\x57\x34\x83\xda\xe0\x78\x62\xb6\x4c\x93\xb5\x68\xb2\x16\xa9\x84\xbc\x7f\x9a\x4b\xe2\x30\x97\xc4\x3c\x97\xc4\x34\x71\xc4\x61\x32\x88\x21\x8d\x4b\x9b\x38\xc8\x07\x4e\xb3\x43\x1c\x66\x87\x98\x67\x87\x38\xcc\x0e\x5b\x2a\x6f\x32\x68\x91\xe4\x8f\xb8\x3d\x7f\xc4\x24\x5d\xc4\xed\x99\x60\x4b\x8b\x32\x64\x6e\x8e\x3c\x0e\x60\x92\xfe\x61\x96\xfe\xe5\x99\x04\xce\x55\x0c\x51\x38\x4f\x56\xde\x5c\x95\xb4\x8a\x2e\xc3\x79\xe3\x4b\x92\x3c\x85\x18\x25\x3d\x7a\x1e\x4f\x3d\x14\xb5\xe6\x32\xde\x78\x37\xf8\x94\x10\x69\x04\x0a\xf9\x2f\x19\xa2\x45\x34\x30\x76\x8c\xe5\x31\x3a\xa2\x95\xa2\x88\x0b\x9c\x1c\x98\x69\x4a\x94\xde\xd7\xf2\xeb\x1a\xae\x14\x3d\x4a\xd6\x90\xc8\x22\x47\x7b\x28\x6f\x79\x97\x08\x34\x19\x60\x85\x49\x50\x5c\xa1\x34\xfd\xae\xf2\xd0\xf7\xf2\x35\x4d\x47\xe9\x8b\x49\xbb\xc4\xb3\xa4\xad\xe3\x4a\x90\x90\x71\x83\xf4\x6e\xc3\x66\xcf\x30\x1b\x1a\xb7\xd0\xa1\xad\x59\x82\x73\x8d\x1e\xf0\xc3\xc6\x5b\x24\xf4\xc6\xfb\xc4\xa6\xec\xee\x3b\xbc\xfa\x36\x83\x2b\x55\x43\x0f\xb0\x86\x9e\xa8\x69\xe2\xd6\xa1\x38\x4d\x0d\x55\xa9\x05\x1a\xb3\xda\x5e\xc9\x25\x7d\x20\x58\xaa\x74\x1d\x85\x93\xee\x94\x82\xb8\x9b\x02\x22\x57\xcf\x36\x63\x49\xc0\xb2\x7b\xfa\x6b\xa9\x31\x1f\xbe\xb1\x4f\xdf\xbd\xbb\xfa\x75\xbc\xae\x76\x75\xfb\xfc\xb7\x6e\x5d\x18\xa5\x40\xfb\xd0\x7c\xdd\x40\xe8\x42\x36\x65\xfb\x46\xf8\xc7\xa7\x8e\x82\x47\x42\xa5\x4f\x98\xd9\x73\x22\xc6\x0b\xe5\xee\x2a\xb5\x22\x5a\xb1\xad\x1a\x25\x3c\x8e\x5f\x1f\x1e\xbf\x58\x13\x4b\x2e\x1b\x18\xbf\x3e\x9c\x9c\x9d\x24\xd4\xed\x83\x19\xbf\x3e\x3c\xda\x70\xc6\xf6\xe3\x84\xbf\xf7\x17\xad\x22\x9d\xca\x43\xe9\x93\x5c\xfa\xf1\xcb\x2d\xc2\xff\xb7\x74\x62\x2c\xf1\xe8\xec\x5f\x17\x3f\x4d\x8e\x26\x47\x3f\x1d\x9f\x9e\x6c\xbe\x3e\xec\xe7\x5f\x0b\x0e\x8d\xe6\x32\x9c\x34\xdf\xc8\xc1\x47\xb9\x0b\x8e\x76\x70\xef\xc5\x3f\x3e\xeb\x80\xff\x17\x93\xcf\x7f\x3c\x93\x8f\x4f\x8e\x8f\x7e\x9e\xfc\x98\x76\x9f\xff\x80\x4b\xfc\x74\xf2\xea\xf4\xd5\xd9\xcf\x93\x57\xdb\x02\xdc\x33\xda\x9e\xe5\x36\x93\xef\x75\x94\x75\xa3\x71\x57\xcc\xc9\xe8\xa3\xb1\xb5\xc5\xd9\xa9\x84\xce\xcc\x8f\x07\xfd\x49\xb1\x83\x05\xdc\x29\xb6\xed\x5b\x47\xe0\x3f\x93\xb9\x25\x46\xaf\xf9\x3b\x07\x7c\x61\x8d\xd0\xe4\x93\x59\x31\x87\x4a\x36\x38\x4f\x12\x70\x89\x4f\xec\xa7\xf8\xa9\xaf\x2d\xaf\xbf\x67\x7e\xb5\xc7\x8a\x39\xeb\x9e\x7c\x9e\xd8\x0a\x15\xdf\x95\x46\xe3\xc7\xf5\x97\xe1\xaf\xb4\x42\x99\x52\x54\x2b\x26\xcb\xaf\xc9\x75\xbe\xad\x15\x7d\xf9\xfc\x6c\x1f\x8b\xf0\xe4\xd5\x11\xb3\x85\x60\x4a\x09\xc3\xe8\x53\x58\x5a\x93\x64\xa0\x6d\x95\x6b\x74\x48\x75\x99\xd0\xe8\xdd\x13\xbb\x23\x28\xd0\x7b\x20\x80\xc7\x7d\x7c\x60\x2c\x68\x76\xb7\x62\x73\xae\x4b\x09\x8c\x7f\xe7\xc9\x2d\xb8\xa5\xb6\xcc\xa6\x1f\xd8\x9b\xe9\x8c\x5d\x5f\x4c\xdf\xb0\x9b\x8b\xe9\xf5\xec\x97\x7d\x8c\xb9\xb3\x55\x1f\x48\xa4\xd1\xc3\xaf\xae\xf4\x33\x8b\x34\x66\xd1\x58\x56\x16\xc6\x2c\x44\x7c\xce\x36\x4d\x8c\x46\x41\x3c\xf3\x86\x38\xe7\x45\x7f\x82\x55\xac\xfd\x88\x92\x3c\x91\xdf\x37\xc6\xf3\xe4\x59\xc9\x97\x46\x71\xa1\xe9\x05\x0b\xc1\xcf\x0d\xfa\x8c\xd2\x18\xaf\x66\x54\x85\x0e\x4d\xe2\x7d\x0c\xe7\xdc\xc1\x93\x4f\xd2\xcd\xef\x37\x6c\xfa\xe6\xf2\xed\xfb\x7d\xa6\xa7\x9b\x93\xef\x75\xe2\x4f\x8e\xce\x8f\x5e\x1e\xbd\x3c\x7f\x79\xb6\xc3\x89\x7f\x39\xbd\xf9\xfb\xc5\x9b\x6f\x73\xf0\x7f\xb1\xf3\x5e\x7c\xd5\xce\x7e\x3a\xd7\x0e\xef\xa0\xdf\xcf\xb5\xc1\xcc\xc3\xf6\x8d\x17\x3c\xb8\x43\xe3\x4a\x70\x42\xd7\x87\x95\x71\x87\xad\x51\x87\x02\x0f\x4b\x51\x55\xe0\x60\xb3\x2b\xbe\x47\x94\xdc\x6d\xe5\x7f\x76\x2e\x1c\xdc\x19\xf3\xf4\x71\x34\x28\xfa\x97\xab\xab\xdb\xbd\x76\xe8\xdc\x3d\x97\xea\xb3\x5f\xae\xf7\x54\xbe\x7b\xb5\x63\xca\x94\x4d\x7c\x90\x0f\x11\x3f\xa3\xaa\x2d\xdc\x7d\x03\x6e\xb5\xe1\x9e\xc3\xfc\xcb\xab\x37\xff\x7c\x77\xb1\x57\x96\x59\x14\xcf\x33\x73\x1f\xa6\xb3\xd9\x5e\x13\xb7\x28\xe2\x57\x1a\xeb\x4c\x01\x88\x6c\xa9\x58\xf6\x1d\xb4\xe7\xb3\x2f\x9a\xde\xf1\xe2\x79\xe6\xec\xc3\xed\xf5\x74\xb6\xd7\x9c\x09\x63\xc9\x6f\x35\x2c\x38\xf5\x2c\x86\x5c\x4f\x7f\x7d\x7b\xb5\x57\x26\xbd\xe5\x17\x32\x38\xfc\x75\xe2\xe6\x49\xfb\x39\x6c\xbc\x7d\x7b\xb9\xd7\x54\x2d\xe7\x5c\xd7\x8d\x7d\x1e\xdd\x6f\x7f\x67\xb3\xab\xf7\x7f\x7d\xfb\xb7\x2f\xb0\xe0\x60\xf4\xf1\xe0\xd3\x7f\x03\x00\x00\xff\xff\x3d\x98\x9b\xc1\x85\x2e\x00\x00")

func defaultJsonBytes() ([]byte, error) {
	return bindataRead(
		_defaultJson,
		"default.json",
	)
}

func defaultJson() (*asset, error) {
	bytes, err := defaultJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "default.json", size: 11909, mode: os.FileMode(0755), modTime: time.Unix(1600715222, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x59, 0x44, 0x8e, 0x9f, 0x9e, 0x8a, 0x16, 0xdb, 0x35, 0xfa, 0x57, 0xa9, 0xf8, 0x72, 0x86, 0xdc, 0x4c, 0x6f, 0x7d, 0x59, 0xd9, 0x4d, 0xb2, 0xe3, 0x74, 0x81, 0x7, 0x9, 0x63, 0x1e, 0xe2, 0x0}}
	return a, nil
}

var _fuseContainerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9a\x5b\x53\x1b\x3b\xf2\xc0\xdf\xf3\x29\x5c\x7e\xce\x03\x01\xc2\x81\xbc\xf9\x6f\xf8\x6f\xa8\x85\xc0\x02\x5b\xe7\x9c\xda\x4a\xa9\x84\xa6\x67\xac\xb5\x6e\xa8\x35\x06\x57\x2a\xdf\x7d\x4b\x33\xf8\xa2\x96\x7c\xce\x81\x38\x29\x6f\x6d\x1e\x42\xac\x5f\xb7\x2e\xdd\xa3\x4b\xb7\x66\xbe\xbc\x19\x0c\x86\x15\xd4\xbc\x55\x61\x24\x82\xb4\x66\xf8\x61\x30\xbc\x1d\x5f\x5e\xb3\xd1\xf8\x8e\x9d\xdd\xdc\x7c\xba\x1a\xbe\x8d\x4a\xdc\x8b\xc9\x25\x77\xc3\x0f\x83\x7f\xbd\x19\x0c\x06\x83\x2f\xdd\xdf\x67\x81\x0c\x20\x42\xeb\x61\x55\xf9\x66\xfc\x91\xfd\x76\x7c\xc4\x8e\x0e\xbb\xea\x9d\x26\xb6\xf7\xa3\x35\x65\x5c\xb6\xd5\x49\x93\x7a\xcb\x4a\xa9\xe0\x60\x7f\xf8\xcc\x3f\x77\xff\x7f\x7d\xfb\x57\xc7\x32\x8a\x7f\x5f\x33\x98\xd1\xcd\xe5\x6b\xfb\xbc\x3c\xbf\xbe\x7d\x4d\x97\xb1\x5e\xd9\x01\x7d\x8b\x9f\x5e\xef\x86\x55\x03\x5b\x1f\xd5\xb7\x0c\xe9\xec\xe2\xb5\x7e\x3a\xbb\xd8\x3c\xa6\xd8\xea\x37\xfa\x6a\xd1\xc4\x77\x19\xdb\x6b\x07\x76\x7b\x70\xb2\xf7\xdb\xcb\x87\x14\xab\x91\x2e\xdf\x0c\x06\x9f\xbb\xd5\x8d\x73\x14\x5c\x29\xcc\x97\xb7\xe1\x9a\x36\xc9\x85\x00\x17\xd6\x6d\xeb\xc9\x21\x45\x88\x09\xa9\xfe\x1d\xa4\x86\xa7\x84\x29\xee\xf5\x3a\xb8\x97\xa6\x4a\xca\x7e\xba\x5e\x14\xdc\x35\x10\x08\x41\x42\x26\x95\xf4\x29\xd0\xb6\x4a\x81\x7d\x34\x19\x58\x7b\xcc\x11\x29\x2b\xa6\xac\x81\x10\x3d\x5a\xe2\xd1\x96\x5c\x60\xb8\xb1\xa8\x00\x1c\x11\x61\xaa\x6b\x8d\x01\x91\x8e\xda\xba\x39\xab\xa5\x02\xe6\xb9\x69\x52\x6d\x0f\x3c\xd1\xad\x5a\x47\x8a\xfb\xa4\x7c\xb0\x5e\x06\x67\x95\x62\x5d\x2b\xb0\x89\xbf\x2b\x08\x82\x2a\x42\x66\x55\x95\x0b\xdc\x23\x97\x21\xc7\x9b\x69\xd6\xcc\x0c\x4c\xa8\x4b\x28\x31\x0e\x9e\x40\xcc\x20\x27\xa9\x87\xe0\x49\x66\x65\xd6\x78\x9b\x3a\xae\xee\x27\x69\x5a\xb5\xe6\xd5\x4c\x22\x1c\x1d\x16\x21\xa3\x5c\x29\x2b\x88\x5f\x6b\x6e\x6c\x90\xf5\x9c\x69\x9e\xce\xde\x3a\x9b\x9a\x75\x36\x37\x7b\x42\x86\x94\x4d\xd8\xba\x30\x63\x7b\x46\x6b\x9a\xf4\x29\x76\x80\xd8\x50\xf1\xc0\x71\x6e\x44\x02\x1b\x08\x4f\x3c\x84\x74\xb4\x4a\x62\x89\x5a\x91\x9a\x69\x89\xd9\x1e\xb4\x9d\x41\x5e\x11\x4b\x7d\x60\x20\x26\x44\x40\x46\x1c\x51\x11\xd6\x58\x40\x54\x8f\x9a\x1a\x7c\x6b\xb2\x67\xb8\x80\xa4\x72\x1b\xd2\x0d\xac\x6e\xe3\x3e\x40\xa6\x50\x03\x41\xb8\x96\x92\xc7\x8a\x90\x0a\x4c\xc0\x12\x4b\xfb\x6c\x20\x40\x23\x69\xe5\x88\xd2\xe7\x1f\x61\x9b\xeb\xb5\x05\xbd\xbc\xb9\x52\x6b\xdd\x7a\xa1\x03\xec\x61\xa6\x2b\xa3\x1b\x3c\x81\x0e\xc0\xc7\xf3\x83\xe2\xbc\x7b\xd7\x78\x47\x51\xae\x54\x40\x5e\x5a\x2f\xc3\x9c\x60\xcf\x4d\x65\x35\x85\x80\x79\xc7\x3d\xcc\xcc\xf1\x80\xb9\x2b\x7b\x98\xeb\x2a\xa9\x25\x7d\xfe\xcc\xdb\xfb\x16\x03\x8b\x2b\x86\xea\xb7\xc8\x1b\xea\x13\xcc\x7a\x43\x2b\xa6\x05\xe7\x45\x6c\x5d\xd6\x5d\x98\x78\xe0\x15\xe3\x1e\x38\x11\x85\xac\xe5\xf8\xa8\x6c\x5d\x71\xea\xb5\xdc\xe2\x92\xb9\xd9\x8a\x95\xcf\xbb\x1d\xaf\x2a\xf6\xc8\x83\x98\x94\x84\xd2\xa4\x2e\x5a\xe7\xef\x4a\x02\xaf\x0b\x8d\x59\x26\xb8\x11\xa0\x52\x48\x0e\x2a\x69\x59\x05\x18\xbc\x9d\x13\x1a\x57\xc3\x8c\xae\x39\x69\xe3\x1c\x62\x24\xaa\x78\xa6\x48\x69\x24\xe9\x19\x12\x59\x7b\x4f\x26\x80\x74\xc9\x0e\x33\x95\x2a\x19\xa1\xca\xf6\x73\x55\xd8\xcf\x55\xc9\xd9\x4a\x9a\x29\x2d\xa7\x9b\x4f\x9c\x71\x60\x28\xc9\x1b\x2a\x52\xa6\x14\x02\xa4\x3d\x6c\xd8\xbd\x73\xc5\xd2\x76\xae\xe8\x76\xae\xf2\xed\x5c\xf7\x87\x6b\x82\x40\xd7\x55\x21\x64\xd1\xd2\x08\xeb\x53\x34\x25\x67\x6a\x07\xd2\x4e\xf5\xd4\xa4\xa7\x6c\x07\x88\x0e\x3d\xc6\x3a\xb0\x9f\x11\x9e\x3e\x4b\xad\xb9\xa3\xe5\xb4\x92\xf3\x36\x90\x60\x4f\x3f\xc4\x09\x87\x10\xa8\xbb\xf4\x03\xeb\xe7\x3f\x81\xd6\xa5\x8f\x54\x3f\xb0\xb8\x8a\x2b\x0f\x02\x64\x1a\x0e\x2d\x44\x08\x69\x24\xad\x1f\x58\x6b\xe8\xf4\xd1\x1e\xe8\xf8\xb1\x21\xeb\x49\x63\x43\x56\x87\xc6\xc6\x8b\x19\x21\x48\xba\xa3\xc7\xac\x6e\x4d\xe6\xe1\x1e\x51\x8f\xb6\x86\x8c\xa9\x18\x54\x1b\x78\x7c\x8e\x03\x92\x09\x6c\xe0\x11\x41\x11\x7f\x53\xf7\xc5\x72\x5a\xcf\xf1\x36\x9d\x81\x4e\xba\xac\x9c\x3c\xd7\x18\xc8\x26\xe5\x0c\x78\xe2\x48\x17\xb7\xe8\x74\xea\x77\x68\x96\x93\xb4\xa7\xfe\x84\x21\x35\x7b\x2b\x93\x9b\x12\xf7\xe8\x25\x8d\x58\x7a\x36\x2b\xa0\xa4\x8f\xd8\x2b\x2d\xf3\x49\x01\xd2\x19\xb4\x60\xa9\x3b\x33\xb3\x3c\x88\xac\x5c\xfb\xf4\x8c\x8e\x4c\x6b\x6c\x32\x46\x91\xe6\xae\x4f\x95\x1c\x6f\xd2\xec\x6c\xc3\x5e\xe5\x81\x9e\xa4\x3d\xa1\x83\xee\x19\x71\x0c\x06\xee\x03\x7b\xce\x90\x13\x91\x26\x3b\x4f\x54\x93\x0d\xef\xef\xd1\x32\xee\xc0\x54\xd2\x34\x05\x81\xb7\x42\x73\x9c\xe6\x92\x87\x16\x5a\x90\xa6\xb6\xb9\xc8\x43\x68\x7d\xa1\x17\x6c\xd1\x91\x95\xdf\x0b\xba\x4d\x81\xa6\x63\x3e\xb0\xd0\x6c\xea\x08\xc5\x04\xaa\xb8\x51\xf1\xba\x8e\xe7\xf4\xbc\x2c\x24\xbe\x5e\x0a\x1c\xf7\x5c\x17\x25\x6c\x11\xb6\x31\xcd\x9f\xfe\x4c\x43\x9a\xa2\x46\xf7\xa3\x55\x50\xe8\xdb\xfb\xae\x09\x69\x02\xf8\x19\x57\xb9\x02\xfe\x91\x49\x85\x5d\x79\x29\xd8\x60\x12\xfe\xe1\x70\xe6\x12\xd2\x4c\x17\x41\x08\xab\x5d\x8a\xe8\x96\x85\xa0\xc9\xf6\x81\xa0\xc9\x3e\x8c\xa0\x2d\x69\x46\x77\x8f\x99\x52\x53\xd1\x72\x5c\x3e\x25\x96\x6e\x1e\x91\xd2\x15\xd9\xb1\x1c\x85\x74\xea\x40\xa8\x69\xb4\xbd\x60\x69\x94\xd3\xd1\xb6\xa0\x99\xc5\x9e\x98\xe5\x2d\x58\xc8\x5b\xb0\x94\xb7\x60\x39\x6f\xc1\x52\xde\x82\x79\x82\x82\xe5\x44\x03\x63\x4a\x90\xab\xfa\x3c\x35\xc3\x52\xf6\x81\xe5\xec\x03\x4b\xd9\x07\x96\xb3\x8f\x0e\x97\x54\x8b\x9a\x59\x9e\x82\x9b\xf3\x14\xcc\x52\x12\x2c\xe6\x1e\xb8\x39\xf7\xe8\x44\xb2\x8a\x79\x81\x27\x57\x81\x98\x25\x1b\x58\x48\x36\x4a\xf1\x24\x4e\x74\xba\x69\xe3\x24\x5b\x27\x13\x5d\x51\x15\xba\x70\x26\x6d\xa8\x48\x08\x1e\x77\x6e\x15\x30\xf0\x34\x46\x41\xd9\x18\xae\xd2\x7b\xa9\x05\x3b\x24\x30\xdf\x93\xa3\xc7\x48\xd7\x1d\xa1\x47\x49\x4f\x1d\x4f\xcf\x13\x74\x4a\x8a\x74\x99\x92\x70\x27\x0f\xa6\xf3\x5b\x90\xd2\x25\x08\xce\x35\x3d\xc8\x9f\x11\x69\x9f\x04\x71\xb1\xbc\xe1\x96\x32\x8a\x48\xc7\x73\xcc\x8e\x94\x39\x2a\x9b\xec\x1d\x01\x92\x56\x42\x43\x93\x25\x7a\xcf\xda\x2d\xd8\x42\x6a\xd0\xf3\x0a\x14\x14\x78\x31\x99\x58\x48\x0a\x97\xb9\x0b\x11\x6e\x10\xc5\x3a\x76\x06\xde\xb7\xa6\x28\x2b\x57\xda\xd0\x5a\xe2\xb4\x90\xd9\x5f\xb8\x9d\x2a\x5f\x4e\xb5\xc5\xcb\x88\x96\x86\x16\x2d\x8d\x85\xf2\xb4\xa0\x27\xe9\x54\x68\xe9\xd0\x3b\x60\xb0\xa0\x95\x18\x34\xa3\xd7\x81\x33\x9d\xcf\xeb\x18\x97\x1c\x52\x90\xee\x10\x91\x90\x0b\xa0\x2e\x8e\xcd\xc0\x6c\xf9\x92\x63\x21\x19\xf2\xfc\xd5\xe6\xe8\xe2\xe2\xea\xd7\xe1\x4a\xc3\x37\xdd\x5b\x8e\x55\x1d\x61\xb5\x06\x13\x62\xa5\x95\x9a\x34\x42\xb5\x55\xf7\x42\xe4\xcb\xd7\x25\x85\xa7\x35\xda\x41\xfa\x32\xa7\xf0\x16\x45\x28\x6b\xe0\x5b\x86\xba\x6c\xea\xcb\xf2\x57\x37\xc2\x0a\x9e\x86\x1f\x06\x7b\x6f\xd7\xe9\x8c\xab\x16\x86\x1f\x06\xfb\x7b\xc7\x7b\xef\xf7\xde\x1f\xbf\x3f\xca\xc5\x77\x8f\x36\xab\x67\xdd\x72\x24\xf1\xdf\xe5\xe8\xf6\xef\x67\xa7\xec\xec\x1f\xc3\xa5\xd2\xd7\xcc\x82\xef\xed\x38\x07\x1e\xad\xe1\x2a\x9e\xc6\x3f\xd8\x7d\x05\xfa\x17\xbc\xf6\x3f\xeb\xae\xe3\x9f\xee\x7a\x89\xbb\xde\x1d\xbc\xdb\xfb\x65\xff\xa7\xcf\x5e\xea\xb3\xe3\x9f\xcb\xf2\x45\x3e\x3b\xdc\x3f\x39\x3c\x39\xfa\x65\xff\xe4\xfd\x7f\xa1\xdf\x48\x04\xba\xff\x83\x0e\xfb\xd5\x00\xb8\x17\x13\x32\xa8\xee\xf6\x4f\x1c\x1d\x2a\x58\x79\xe6\xf3\xf3\xaf\x6f\x34\x97\x7b\xcd\x36\xbd\x7c\x8e\xb2\x3f\x09\xc8\x13\x4f\xad\xc9\xee\x3d\xf0\xa9\xb3\xd2\x90\x6f\x29\xc4\x04\x6a\xd5\xe2\x24\xcb\xe3\x14\xee\x88\xa3\xd3\xef\x45\x7a\xb0\xfa\x94\x66\x8b\x7e\x17\x13\xd6\xdf\xe0\xee\x88\xdd\x3a\xbd\x3a\x1e\x0c\x86\x4f\xab\x6f\x9b\xb6\x66\xb7\xb6\x95\xac\xe7\x4c\x55\x61\xb7\xed\x4e\xc1\xf1\xd1\xd6\x1d\x81\x07\x27\x7b\xcc\x09\xc9\xb4\x96\x96\xd1\xeb\xf1\x54\x9a\xe5\x21\x9d\xd8\xb7\x26\x26\x43\x4c\x1a\x0c\x7e\x47\xbc\x19\x07\x96\xfa\x2e\x92\xa7\xad\x7b\xcf\x3a\x30\xec\x7e\xce\x26\xdc\x54\x0a\x18\xff\xf1\xb3\x49\x70\x97\x59\x3f\x1e\x5d\xb3\xd3\xd1\x98\xdd\x9c\x8d\x4e\xd9\xed\xd9\xe8\x66\xfc\xf1\x3b\x2c\xa0\xd6\x90\xfc\xbb\x4c\x7e\xfc\xc9\xb5\xc9\x25\xb7\xbf\xdf\xb2\xd1\xe9\xe5\xf9\xa7\xad\x3b\xc3\xc3\xbd\xb5\xbb\xf3\xec\xa3\xa1\xff\x77\x75\x75\xb7\x75\x3b\xc5\xc4\xef\x9a\x9d\xe3\x8f\x37\xdf\xc3\xd2\xfe\x7e\x8d\x69\x5b\xb5\xe9\x0b\x04\x69\x64\x28\xe0\x7a\x03\x7f\x68\xc1\xcf\x17\x7c\x97\xfc\x76\x79\x75\xfa\xcf\x8b\xb3\xed\xc7\x13\x42\xec\xd6\xfc\xb8\x1e\x8d\xc7\xdb\x9f\x1e\x53\x91\xbe\xd7\x72\xde\x0a\x40\x64\x33\xcd\x0a\x6f\xba\x97\xb2\xc2\x3b\xea\xe0\xb9\xd8\xad\x99\x71\x7d\x77\x33\x1a\x6f\x7f\x66\x48\xeb\xc8\xe7\x4b\x0e\xbc\xde\x29\xcb\x6f\x46\xbf\x9e\x5f\x6d\x3f\xc2\xda\xf0\x25\x1a\x96\xbf\xac\x5e\x5c\x9e\xef\x92\x63\xee\xce\x2f\xb7\x3f\x21\x66\x13\x6e\x9a\xd6\xed\x96\xa1\x77\xbf\xb3\xf1\xd5\xa7\xff\x3f\xff\xdb\x0b\xcd\x7d\x13\xf5\xbe\xfe\x27\x00\x00\xff\xff\x03\x9e\x72\x97\x67\x34\x00\x00")

func fuseContainerJsonBytes() ([]byte, error) {
	return bindataRead(
		_fuseContainerJson,
		"fuse-container.json",
	)
}

func fuseContainerJson() (*asset, error) {
	bytes, err := fuseContainerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fuse-container.json", size: 13415, mode: os.FileMode(0644), modTime: time.Unix(1600711441, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x93, 0x3c, 0x72, 0x2e, 0x2, 0xf6, 0x24, 0xe, 0xec, 0x45, 0x6b, 0x2f, 0x80, 0xf1, 0x66, 0xd7, 0xf4, 0x28, 0x82, 0x44, 0xe, 0x35, 0x6e, 0x8, 0xab, 0xf1, 0x25, 0x2d, 0x67, 0x99, 0x38, 0x76}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"default.json":        defaultJson,
	"fuse-container.json": fuseContainerJson,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"default.json":        &bintree{defaultJson, map[string]*bintree{}},
	"fuse-container.json": &bintree{fuseContainerJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
